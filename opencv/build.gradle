/*
 * By downloading, copying, installing or using the software you agree to this license.
 * If you do not agree to this license, do not download, install,
 * copy or use the software.
 *
 *
 *                           License Agreement
 *                For Open Source Computer Vision Library
 *                        (3-clause BSD License)
 *
 * Copyright (C) 2015-2017, saki t_saki@serenegiant.com
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 *   * Neither the names of the copyright holders nor the names of the contributors
 *     may be used to endorse or promote products derived from this software
 *     without specific prior written permission.
 *
 * This software is provided by the copyright holders and contributors "as is" and
 * any express or implied warranties, including, but not limited to, the implied
 * warranties of merchantability and fitness for a particular purpose are disclaimed.
 * In no event shall copyright holders or contributors be liable for any direct,
 * indirect, incidental, special, exemplary, or consequential damages
 * (including, but not limited to, procurement of substitute goods or services;
 * loss of use, data, or profits; or business interruption) however caused
 * and on any theory of liability, whether in contract, strict liability,
 * or tort (including negligence or otherwise) arising in any way out of
 * the use of this software, even if advised of the possibility of such damage.
 */
apply plugin: 'com.android.library'
import org.apache.tools.ant.taskdefs.condition.Os

android {
	compileSdkVersion versionCompiler
	buildToolsVersion versionBuildTool

	compileOptions {
		sourceCompatibility javaSourceCompatibility
		targetCompatibility javaTargetCompatibility
	}

	defaultConfig {
		minSdkVersion 18
		targetSdkVersion versionTarget
		versionCode 1
		versionName "1.0"
	}

	buildTypes {
		release {
			minifyEnabled false
			proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
		}
	}

	sourceSets {
		main {
			jniLibs.srcDir 'src/main/libs'
			jni.srcDirs = []
		}
	}

	productFlavors {
	}
}

tasks.withType(JavaCompile) {
	compileTask -> compileTask.dependsOn ndkBuild
}

String getNdkBuildPath() {
	Properties properties = new Properties()
	properties.load(project.rootProject.file('local.properties').newDataInputStream())
	def ndkBuildingDir = properties.getProperty("ndk.dir")
	def ndkBuildPath = ndkBuildingDir
	if (Os.isFamily(Os.FAMILY_WINDOWS)) {
		ndkBuildPath = ndkBuildingDir + '/ndk-build.cmd'
	} else {
		ndkBuildPath = ndkBuildingDir + '/ndk-build'
	}
	return ndkBuildPath
}

task ndkBuild(type: Exec, description: 'Compile JNI source via NDK') {
	println('executing ndkBuild')
	commandLine getNdkBuildPath(), '-j4', '-C', file('src/main').absolutePath
}

task ndkClean(type: Exec, description: 'clean JNI libraries') {
	println('executing ndkBuild clean')
	commandLine getNdkBuildPath(), 'clean', '-C', file('src/main').absolutePath
}

clean.dependsOn 'ndkClean'

dependencies {
	compile fileTree(dir: 'libs', include: ['*.jar'])
	compile("com.serenegiant:common:${commonLibVersion}") {
		exclude group: 'com.android.support'
	}
}
