apply plugin: 'com.android.library'
import org.apache.tools.ant.taskdefs.condition.Os

android {
	compileSdkVersion versionCompiler
	buildToolsVersion versionBuildTool

	defaultConfig {
		minSdkVersion 18
		targetSdkVersion versionTarget
		versionCode 1
		versionName "1.0"
	}

	buildTypes {
		release {
			minifyEnabled false
			proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
		}
	}

	sourceSets {
		main {
			jniLibs.srcDir 'src/main/libs'
			jni.srcDirs = []
		}
	}

	productFlavors {
	}
}

tasks.withType(JavaCompile) {
	compileTask -> compileTask.dependsOn ndkBuild
}

String getNdkBuildPath() {
	def ndkBuildingDir = project.plugins.findPlugin('com.android.library').sdkHandler.getNdkFolder().absolutePath
	def ndkBuildPath = ndkBuildingDir
	if (Os.isFamily(Os.FAMILY_WINDOWS)) {
		ndkBuildPath = ndkBuildingDir + '/ndk-build.cmd'
	} else {
		ndkBuildPath = ndkBuildingDir + '/ndk-build'
	}
	return ndkBuildPath
}

task ndkBuild(type: Exec, description: 'Compile JNI source via NDK') {
	println('executing ndkBuild')
	commandLine getNdkBuildPath(), '-j4', '-C', file('src/main').absolutePath
}

task ndkClean(type: Exec, description: 'clean JNI libraries') {
	println('executing ndkBuild clean')
	commandLine getNdkBuildPath(), 'clean', '-C', file('src/main').absolutePath
}

clean.dependsOn 'ndkClean'

dependencies {
	compile fileTree(dir: 'libs', include: ['*.jar'])
}
