/*
 * By downloading, copying, installing or using the software you agree to this license.
 * If you do not agree to this license, do not download, install,
 * copy or use the software.
 *
 *
 *                           License Agreement
 *                        (3-clause BSD License)
 *
 * Copyright (C) 2015-2017, saki t_saki@serenegiant.com
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 *   * Neither the names of the copyright holders nor the names of the contributors
 *     may be used to endorse or promote products derived from this software
 *     without specific prior written permission.
 *
 * This software is provided by the copyright holders and contributors "as is" and
 * any express or implied warranties, including, but not limited to, the implied
 * warranties of merchantability and fitness for a particular purpose are disclaimed.
 * In no event shall copyright holders or contributors be liable for any direct,
 * indirect, incidental, special, exemplary, or consequential damages
 * (including, but not limited to, procurement of substitute goods or services;
 * loss of use, data, or profits; or business interruption) however caused
 * and on any theory of liability, whether in contract, strict liability,
 * or tort (including negligence or otherwise) arising in any way out of
 * the use of this software, even if advised of the possibility of such damage.
 */
apply plugin: 'com.android.application'

android {
	compileSdkVersion versionCompiler
	buildToolsVersion versionBuildTool

	compileOptions {
		sourceCompatibility javaSourceCompatibility
		targetCompatibility javaTargetCompatibility
	}

	defaultConfig {
		minSdkVersion 18
		targetSdkVersion versionTarget
		manifestPlaceholders = [appName:"@string/app_name"]
		buildConfigField "boolean", "USE_SKYCONTROLLER", "${project.property("USE_SKYCONTROLLER")}"
		versionCode 61
		versionName '0.75.0'
	}

	applicationVariants.all { variant ->
//		if (variant.buildType.name.equals("release")) {
			variant.outputs.each { output ->
				if (output.outputFile != null && output.outputFile.name.endsWith('.apk')) {
					def list = applicationId.split("\\.")
					def appName = list[list.length - 1]
//					def date = new java.text.SimpleDateFormat("yyyyMMdd_HHmmss").format(new Date())
					def apkName = "${appName}_${variant.buildType.name}_r${versionName}_v${versionCode}.apk"
					if (output.hasProperty('outputFileName')) {
						output.outputFileName = apkName
					} else {
						output.outputFile = new File(output.outputFile.parent, apkName)
					}
				}
			}
//		}
	}

	signingConfigs {
		aceparrot_releaseKey {
			Properties properties = new Properties()
			properties.load(new File(rootDir.absolutePath + "/local.properties").newDataInputStream())
			File keystoreFile = file(properties.getProperty('KEYSTORE_ACE_PARROT'))
			storeFile file(keystoreFile)
			storePassword = properties.getProperty('STORE_PASSWORD_ACE_PARROT')
			keyPassword = properties.getProperty('KEY_PASSWORD_ACEPARROT')
			keyAlias properties.getProperty('ALIAS_ACEPARROT')
		}
		autoparrot_releaseKey {
			Properties properties = new Properties()
			properties.load(new File(rootDir.absolutePath + "/local.properties").newDataInputStream())
			File keystoreFile = file(properties.getProperty('KEYSTORE_AUTO_PARROT'))
			storeFile file(keystoreFile)
			storePassword = properties.getProperty('STORE_PASSWORD_AUTO_PARROT')
			keyPassword = properties.getProperty('KEY_PASSWORD_AUTO_PARROT')
			keyAlias properties.getProperty('ALIAS_AUTO_PARROT')
		}
	}

	buildTypes {
		debug {
			debuggable true
//			applicationIdSuffix = '.debug'  // パッケージ名の末尾に .debug をつける
			versionNameSuffix = 'a'
		}
		release {
			debuggable false
			minifyEnabled false
			proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
		}
	}

	productFlavors {
		aceparrot {
			applicationId "com.serenegiant.aceparrot"
			signingConfig signingConfigs.aceparrot_releaseKey
		}
		autoparrot {
			applicationId "com.serenegiant.autoparrot"
			signingConfig signingConfigs.autoparrot_releaseKey
		}
	}

	packagingOptions {
		exclude 'lib/armeabi/*.so'
		exclude 'lib/arm64-v8a/*.so'
		exclude 'lib/mips/**.so'
		exclude 'lib/mips64/*.so'
		exclude 'lib/x86_64/*.so'
	}
}

dependencies {
	compile fileTree(dir: 'libs', include: ['*.jar'])

	compile project(':arflight')
	autoparrotCompile project(':opencv')
}
