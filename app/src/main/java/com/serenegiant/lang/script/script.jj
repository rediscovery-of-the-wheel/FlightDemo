/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. script.jj */
/*@egen*/options {
  JAVA_UNICODE_ESCAPE = true;
  ERROR_REPORTING = true;
  DEBUG_PARSER = true;
  STATIC = false;
  JDK_VERSION = "1.6";
             
                           
               
}

PARSER_BEGIN(ScriptParser)

package com.serenegiant.lang.script;
import android.util.Log;
import java.util.*;

public class ScriptParser/*@bgen(jjtree)*/implements ScriptParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTScriptParserState jjtree = new JJTScriptParserState();

/*@egen*/

	private static final String TAG = "ScriptParser";

	/** \u30b7\u30f3\u30dc\u30eb\u30c6\u30fc\u30d6\u30eb */
	private final java.util.Map<String, Object> symbols = new java.util.LinkedHashMap<String, Object>();

	/** \u6f14\u7b97\u7528\u306e\u30b9\u30bf\u30c3\u30af */
	private Object[] stack = new Object[1024];
	private int top = -1;

	/* \u6f14\u7b97\u7528\u306e\u30b9\u30bf\u30c3\u30af\u306b\u5024\u3092\u30d7\u30c3\u30b7\u30e5 */
	public void push_op(Object op) {
		stack[++top] = op;
	}

	/* \u6f14\u7b97\u7528\u306e\u30b9\u30bf\u30c3\u30af\u306b\u5024\u3092\u30d7\u30c3\u30b7\u30e5 */
	public void push_op(int index, Object op) {
		top += index;
		stack[top] = op;
	}

	/* \u6f14\u7b97\u7528\u306e\u30b9\u30bf\u30c3\u30af\u304b\u3089\u5024\u3092\u53d6\u5f97 */
	public Object pop_op() {
		return stack[top--];
	}

	/* \u6f14\u7b97\u7528\u306e\u30b9\u30bf\u30c3\u30af\u306e\u4e0a\u304b\u3089\u6307\u5b9a\u3057\u305f\u756a\u53f7\u306e\u5024\u3092\u53d6\u5f97(\u30b9\u30bf\u30c3\u30af\u304b\u3089\u306f\u53d6\u308a\u51fa\u3055\u306a\u3044) */
	public Object peek_op(int index) {
		return stack[top + index];
	}

	/* \u30b7\u30f3\u30dc\u30eb\u3092\u767b\u9332 */
	public void add_symbol(String symbol, Object value) {
		symbols.put(symbol, value);
	}

	/* \u30b7\u30f3\u30dc\u30eb\u306b\u5bfe\u5fdc\u3059\u308b\u5024\u3092\u53d6\u5f97, \u30b7\u30f3\u30dc\u30eb\u30c6\u30fc\u30d6\u30eb\u306b\u5b58\u5728\u3057\u306a\u3051\u308c\u3070null */
	public Object get_symbol(String symbol) {
		if (symbols.containsKey(symbol)) {
			return symbols.get(symbol);
		} else {
			return null;
		}
	}

	/* \u30b7\u30f3\u30dc\u30eb\u304c\u30b7\u30f3\u30dc\u30eb\u30c6\u30fc\u30d6\u30eb\u306b\u767b\u9332\u3055\u308c\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3092\u53d6\u5f97 */
	public boolean symbol_exist(String symbol) {
		return symbols.containsKey(symbol);
	}

    /** typedef\u3067\u5ba3\u8a00\u3057\u305f\u578b\u540d\u4fdd\u6301\u7528 */
    private final Set types = new HashSet();

    /** \u30d1\u30fc\u30b5\u30fc\u304ctypedef\u306e\u51e6\u7406\u4e2d\u304b\u3069\u3046\u304b\u3092\u4fdd\u6301\u3059\u308b\u305f\u3081 */
    private final Stack typedefParsingStack = new Stack();

    /** \u6307\u5b9a\u3057\u305f\u8b58\u5225\u5b50\u304ctypedef\u3067\u5b9a\u7fa9\u3057\u305f\u578b\u540d\u304b\u3069\u3046\u304b\u3092\u8fd4\u3059 */
    private boolean isType(String type){
		return types.contains(type);
    }

    /** typedef\u7528\u306b\u578b\u540d\u3092\u8ffd\u52a0 */
    private void addType(String type) {
		types.add(type);
    }

    /** typedef\u3067\u5b9a\u7fa9\u3057\u305f\u578b\u540d\u306e\u4e00\u89a7\u3092\u51fa\u529b */
    private void printTypes(){
		for (Iterator i = types.iterator(); i.hasNext();) {
			System.out.println(i.next());
		}
    }

    // \u30d1\u30fc\u30b5\u30fc\u3092\u751f\u6210
    public static ScriptParser createInstance(java.io.InputStream in) {
		final ScriptParser parser = new ScriptParser(in);
		// Hack to include type "special types"
	    parser.types.add("__signed__");
	    parser.types.add("__const");
	    parser.types.add("__inline__");
	    parser.types.add("__signed");
		return parser;
	}
}

PARSER_END(ScriptParser)

/** \u7a7a\u767d */
SKIP : {
	" " |
	"\t" |
	"\n" |
	"\r" |
	<"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")> |
	<"/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/"> |
	"#" : PREPROCESSOR_OUTPUT
}

<PREPROCESSOR_OUTPUT> SKIP:
{
     "\n" : DEFAULT
}

<PREPROCESSOR_OUTPUT> MORE:
{
	"\\\n" |
	"\\\r\n" |
	< ~[] >
}


/** \u6570\u5b57/\u6587\u5b57(\u5217)\u5b9a\u6570\u7528\u30c8\u30fc\u30af\u30f3 */
TOKEN : {
	<INTEGER_LITERAL: <DECIMAL_LITERAL> (["l","L"])? | <HEX_LITERAL> (["l","L"])? | <OCTAL_LITERAL> (["l","L"])?> |
	<#DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])*> |
	<#HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+> |
	<#OCTAL_LITERAL: "0" (["0"-"7"])*> |
	<FLOATING_POINT_LITERAL: (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])? | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])? | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])? | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]> |
	<#EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+> |
	<CHARACTER_LITERAL: "\'" (~["\'","\\","\n","\r"] | "\\" (["n","t","b","r","f","\\","\'","\""] | ["0"-"7"] (["0"-"7"])? | ["0"-"3"] ["0"-"7"] ["0"-"7"])) "\'"> |
	<STRING_LITERAL: "\"" ( ~["\"","\\","\n","\r"] | "\\" ( ["n","t","b","r","f","\\","\'","\""] | ["0"-"7"] (["0"-"7"])?  | ["0"-"3"] ["0"-"7"] ["0"-"7"] | ( ["\n","\r"] | "\r\n")))* "\"">
}

/** \u4e88\u7d04\u8a9e\u3068\u5b9a\u6570\u7528\u306e\u30c8\u30fc\u30af\u30f3 */
TOKEN : {
	<CONTINUE: "continue"> |
	<VOLATILE: "volatile"> |
	<REGISTER: "register"> |
	<UNSIGNED: "unsigned"> |
	<TYPEDEF: "typedef"> |
	<DFLT: "default"> |
	<DOUBLE: "double"> |
	<SIZEOF: "sizeof"> |
	<SWITCH: "switch"> |
	<RETURN: "return"> |
	<EXTERN: "extern"> |
	<STRUCT: "struct"> |
	<STATIC: "static"> |
	<SIGNED: "signed"> |
	<WHILE: "while"> |
	<BREAK: "break"> |
	<UNION: "union"> |
	<CONST: "const"> |
	<FLOAT: "float"> |
	<SHORT: "short"> |
	<ELSE: "else"> |
	<CASE: "case"> |
	<LONG: "long"> |
	<ENUM: "enum"> |
	<AUTO: "auto"> |
	<VOID: "void"> |
	<CHAR: "char"> |
	<GOTO: "goto"> |
	<FOR: "for"> |
	<INT: "int"> |
	<IF: "if"> |
	<DO: "do">
}

/** \u8b58\u5225\u5b50\u7528\u306e\u30c8\u30fc\u30af\u30f3 */
TOKEN : {
	<IDENTIFIER: <LETTER> (<LETTER> | <DIGIT>)*> |
	<#LETTER: ["$","A"-"Z","_","a"-"z"]> |
	<#DIGIT: ["0"-"9"]>
}

/** \u6f14\u7b97\u5b50\u7528\u306e\u30c8\u30fc\u30af\u30f3 */
TOKEN :
{
	< COMMA: ":" > |
	< QUESTION: "?" > |
	< ELLIPSIS: "..." > |
	< ASSIGN_EQ: "=" > |
	< MULT_EQ: "*=" > |
	< DIV_EQ: "/=" > |
	< MOD_EQ: "%=" > |
	< PLUS_EQ: "+=" > |
	< MINUS_EQ: "-=" > |
	< SHIFT_LEFT_EQ: "<<=" > |
	< SHIFT_RIGHT_EQ: ">>=" > |
	< BIT_AND_EQ: "&=" > |
	< BIT_XOR_EQ: "^=" > |
	< BIT_OR_EQ: "|=" > |
	< OR: "||" > |
	< AND: "&&" > |
	< BIT_OR: "|" > |
	< BIT_XOR: "^" > |
	< AMPERSAND: "&" > |
	< EQ: "==" > |
	< NOT_EQ: "!=" > |
	< LT: "<" > |
	< GT: ">" > |
	< LTE: "<=" > |
	< GTE: ">=" > |
	< SHIFT_LEFT: "<<" > |
	< SHIFT_RIGHT: ">>" > |
	< PLUS: "+" > |
	< MINUS: "-" > |
	< STAR: "*" > |
	< DIV: "/" > |
	< MOD: "%" > |
	< PLUSPLUS: "++" > |
	< MINUSMINUS: "--" > |
	< TILDE: "~" > |
	< NOT: "!" > |
	< DOT: "." > |
	< POINTERTO: "->" > |
	< DOTSTAR: ".*" > |
	< ARROWSTAR: "->*" >
}

/**************************************************
 * \u3053\u3053\u304b\u3089\u4e0b\u304c\u6587\u6cd5(\u751f\u6210\u898f\u5247)
 **************************************************/
/** \u3053\u308c\u304c\u89e3\u6790\u306e\u30a8\u30f3\u30c8\u30ea\u30dd\u30a4\u30f3\u30c8 */
ASTParse Parse()        : {/*@bgen(jjtree) Parse */
  ASTParse jjtn000 = new ASTParse(JJTPARSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Parse */
        try {
/*@egen*/
	(ExternalDeclaration())+/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{	printTypes();
		Log.i(TAG, "\u89e3\u6790\u7d42\u4e86");
		return jjtn000;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/** \u5916\u90e8\u5ba3\u8a00 */
void ExternalDeclaration() : {}
{
	// \u95a2\u6570\u5ba3\u8a00\u307e\u305f\u306f\u5ba3\u8a00
	(	LOOKAHEAD( FunctionDefinition() ) FunctionDefinition() |
		Declaration() |
		";"
	)
}

/** \u95a2\u6570\u5b9a\u7fa9 */
void FunctionDefinition() : {}
{
	[LOOKAHEAD(DeclarationSpecifiers()) DeclarationSpecifiers()] Declarator() [ DeclarationList() ]
	CompoundStatement()
}

/** \u5ba3\u8a00 */
void Declaration() : {}
{
	DeclarationSpecifiers() ( InitDeclaratorList() )? ";"
}

/** \u5ba3\u8a00\u306e\u7a2e\u985e(\u578b)\u30ea\u30b9\u30c8 */
void DeclarationList() : {}
{
	( LOOKAHEAD(Declaration()) Declaration() )+
}

/** \u5ba3\u8a00\u306e\u30a2\u30af\u30bb\u30b9\u6307\u5b9a\u5b50 */
void DeclarationSpecifiers() : {}
{
	StorageClassSpecifier() [ LOOKAHEAD(DeclarationSpecifiers()) DeclarationSpecifiers() ] |
	TypeSpecifier()  [ LOOKAHEAD(DeclarationSpecifiers()) DeclarationSpecifiers() ] |
	TypeQualifier() [ LOOKAHEAD(DeclarationSpecifiers()) DeclarationSpecifiers() ]
}

/** \u5909\u6570\u30fb\u578b\u306e\u30a2\u30af\u30bb\u30b9\u6307\u5b9a\u5b50 */
void StorageClassSpecifier() : {}
{
	( <AUTO> | <REGISTER> | <STATIC> | <EXTERN> | <TYPEDEF>
		{
			typedefParsingStack.push(Boolean.TRUE);
		}
	)
}

/** \u578b\u306e\u7a2e\u985e */
void TypeSpecifier() : {}
{
	(	<VOID> | <CHAR> | <SHORT> | <INT> | <LONG> | <FLOAT> | <DOUBLE> | <SIGNED> |
		<UNSIGNED> | StructOrUnionSpecifier() | EnumSpecifier() | LOOKAHEAD( { isType(getToken(1).image) } )TypedefName()
	)
}

/** \u578b\u4fee\u98fe\u5b50 */
void TypeQualifier() : {}
{
	( <CONST> | <VOLATILE> )
	{ Log.v(TAG, "\u5b9a\u6570\u578b"); }
}

/** \u69cb\u9020\u4f53/\u30e6\u30cb\u30aa\u30f3\u30a2\u30af\u30bb\u30b9\u6307\u5b9a\u5b50 */
void StructOrUnionSpecifier() : {}
{
	{
		typedefParsingStack.push(Boolean.FALSE);
	}

	StructOrUnion() ( LOOKAHEAD(3) [ <IDENTIFIER> ] "{" StructDeclarationList() "}" | <IDENTIFIER> )

	{
		typedefParsingStack.pop();
	}
}

/** \u69cb\u9020\u4f53/\u30e6\u30cb\u30aa\u30f3 */
void StructOrUnion() : {}
{
	( <STRUCT> | <UNION> )
}

/** \u69cb\u9020\u4f53/\u30e6\u30cb\u30aa\u30f3\u5ba3\u8a00\u30ea\u30b9\u30c8 */
void StructDeclarationList() : {}
{
	( StructDeclaration() )+
}

/** \u69cb\u9020\u4f53/\u30e6\u30cb\u30aa\u30f3\u5ba3\u8a00 */
void StructDeclaration() : {}
{
	SpecifierQualifierList() StructDeclaratorList() ";"
}

/** \u69cb\u9020\u4f53/\u30e6\u30cb\u30aa\u30f3\u306e\u5b9a\u7fa9\u5185\u5bb9\u30ea\u30b9\u30c8 */
void StructDeclaratorList() : {}
{
	StructDeclarator() ( "," StructDeclarator() )*
}

/** \u69cb\u9020\u4f53/\u30e6\u30cb\u30aa\u30f3\u306e\u5b9a\u7fa9\u5185\u5bb9 */
void StructDeclarator() : {}
{
	( LOOKAHEAD(3) Declarator() | [ Declarator() ] ":" ConstantExpression() )
//	( Declarator() [ ":" ConstantExpression() ] | ":" ConstantExpression() )	// \u30d3\u30c3\u30c8\u30d5\u30a3\u30fc\u30eb\u30c9\u30a2\u30af\u30bb\u30b9\u6642\u306e\u30a8\u30e9\u30fc\u4fee\u6b63?
}

/** \u521d\u671f\u5316\u4ed8\u304d\u5ba3\u8a00\u30ea\u30b9\u30c8 */
void InitDeclaratorList() : {}
{
	InitDeclarator() ("," InitDeclarator())*
	{
		// Finished with a typedefDeclaration??
		if(!(typedefParsingStack.empty()) && ((Boolean)typedefParsingStack.peek()).booleanValue()) {
			typedefParsingStack.pop();
		}
		Log.v(TAG, "\u521d\u671f\u5316\u4ed8\u304d\u5ba3\u8a00\u30ea\u30b9\u30c8");
	}
}

/** \u521d\u671f\u5316\u4ed8\u304d\u5ba3\u8a00 */
void InitDeclarator() : {}
{
	Declarator() [ <ASSIGN_EQ> Initializer() ]
	{ Log.v(TAG, "\u521d\u671f\u5316\u4ed8\u304d\u5ba3\u8a00"); }
}

/** \u30a2\u30af\u30bb\u30b9\u6307\u5b9a\u5b50 */
void SpecifierQualifierList() : {}
{
	TypeSpecifier() [ LOOKAHEAD(SpecifierQualifierList()) SpecifierQualifierList() ] |
	TypeQualifier() [ LOOKAHEAD(SpecifierQualifierList()) SpecifierQualifierList() ]
}

/** \u5217\u6319\u578b */
void EnumSpecifier() : {}
{
	<ENUM> ( LOOKAHEAD(3) [ <IDENTIFIER> ] "{" EnumeratorList() "}" | <IDENTIFIER> )
}

/** \u5217\u6319\u578b\u306e\u5ba3\u8a00\u30ea\u30b9\u30c8 */
void EnumeratorList() : {}
{
	Enumerator() ("," Enumerator())*
}

/** \u5217\u6319\u578b\u306e\u30a2\u30a4\u30c6\u30e0\uff11\u3064\u5206 */
void Enumerator() : {}
{
	<IDENTIFIER> [ <ASSIGN_EQ> ConstantExpression() ]
}

/** \u5ba3\u8a00\u5b50 */
void Declarator() : {}
{
	[ Pointer() ] DirectDeclarator()
}

/** \u76f4\u63a5\u5ba3\u8a00\u5b50 */
void DirectDeclarator() : { Token t;}
{
	// \u8b58\u5225\u5b50\u307e\u305f\u306f\u95a2\u6570\u547c\u3073\u51fa\u3057
	(	t = <IDENTIFIER>
		{
			if(!(typedefParsingStack.empty()) && ((Boolean)typedefParsingStack.peek()).booleanValue()) {
				addType(t.image);
			}
		} |
		"(" Declarator() ")"
	)

	{ typedefParsingStack.push( Boolean.FALSE ); }

	(	"[" [ ConstantExpression() ] "]" |
		LOOKAHEAD(3) "(" ParameterTypeList() ")" |
		"(" [ IdentifierList() ] ")"
	)*

	{ typedefParsingStack.pop(); }
}

/** \u30dd\u30a4\u30f3\u30bf\u6307\u5b9a\u5b50 */
void Pointer() : {}
{
	<STAR> [ TypeQualifierList() ] [ Pointer() ]
}

/** \u578b\u6307\u5b9a\u5b50 */
void TypeQualifierList() : {}
{
	(TypeQualifier())+
}

/** \u30d1\u30e9\u30e1\u30fc\u30bf\u30bf\u30a4\u30d7\u30ea\u30b9\u30c8 */
void ParameterTypeList() : {}
{
	ParameterList() ["," "..." ]
}

/** \u30d1\u30e9\u30e1\u30fc\u30bf\u5ba3\u8a00\u30ea\u30b9\u30c8 */
void ParameterList() : {}
{
	ParameterDeclaration() (LOOKAHEAD(2) "," ParameterDeclaration())*
}

/** \u30d1\u30e9\u30e1\u30fc\u30bf\u5ba3\u8a00 */
void ParameterDeclaration() : {}
{
	DeclarationSpecifiers()
	(	LOOKAHEAD(Declarator()) Declarator() |
		AbstractDeclarator()
	)
	(	<ASSIGN_EQ> AssignmentExpression() )?
}

/** \u8b58\u5225\u5b50\u30ea\u30b9\u30c8 */
void IdentifierList() : {}
{
	<IDENTIFIER> ("," <IDENTIFIER>)*
}

/** \u30a4\u30cb\u30b7\u30e3\u30e9\u30a4\u30b6\u30ea\u30b9\u30c8 */
void InitializerList() : {}
{
	Initializer()
	(	LOOKAHEAD(2) "," Initializer() )*
}

/** \u30a4\u30cb\u30b7\u30e3\u30e9\u30a4\u30b6 */
void Initializer() : {}
{
	"{" InitializerList() [","] "}" |
	AssignmentExpression()
}

/** \u578b\u540d */
void TypeName() : {}
{
	SpecifierQualifierList() [ AbstractDeclarator() ]
}

void AbstractDeclarator() : {}
{
	LOOKAHEAD(3) Pointer() |
	[ Pointer() ] DirectAbstractDeclarator()
}

void DirectAbstractDeclarator() : {}
{
	(	LOOKAHEAD(2) "(" AbstractDeclarator() ")" |
		"[" [ConstantExpression()] "]" |
		"(" [ParameterTypeList()] ")"
	)
	(	"[" [ ConstantExpression() ] "]" | "(" [ ParameterTypeList() ] ")"
	)*
}

/** typedef\u540d */
void TypedefName() : {}
{
	<IDENTIFIER>
}

/** \u547d\u4ee4\u6587\u30ea\u30b9\u30c8 */
void StatementList() : {}
{
	(	LOOKAHEAD(Statement()) Statement() )+
}

/** \u547d\u4ee4\u6587 */
void Statement() : {}
{
	LOOKAHEAD( Declaration() ) Declaration() |
	LOOKAHEAD( Expression() ";" ) Expression() ";" |
	CompoundStatement() |
	SelectionStatement() |
	JumpStatement() |
	";" |
	LOOKAHEAD(2) LabeledStatement() |
	IterationStatement()
}

/** \u30e9\u30d9\u30eb\u547d\u4ee4: */
void LabeledStatement() : {}
{
	(	<IDENTIFIER> ":" Statement() |
		<CASE> ConstantExpression() ":" Statement() |
		<DFLT> ":" Statement()
	)
}

/** \u8907\u547d\u4ee4\u6587 */
void CompoundStatement() : {}
{
	"{"
    (	StatementList() )?
	"}"
}

/** \u9078\u629e\u547d\u4ee4\u6587 */
void SelectionStatement() : {}
{
	(	<IF> "(" Expression() ")" Statement() [ LOOKAHEAD(2) <ELSE> Statement() ] |
		<SWITCH> "(" Expression() ")" Statement()
	)
}

/** \u5217\u6319\u547d\u4ee4 */
void IterationStatement() : {}
{
	(	<WHILE> "(" Expression() ")" Statement() |
		<DO> Statement() <WHILE> "(" Expression() ")" ";" |
		<FOR> "(" ( LOOKAHEAD(3) Declaration() | Expression() ";" | ";")
			( Expression() )? ";" ( Expression() )? ")" Statement()
	)
}

/** \u30b8\u30e3\u30f3\u30d7\u547d\u4ee4 */
void JumpStatement() : {}
{
	(	<GOTO> <IDENTIFIER> ";" |
		<CONTINUE> ";" |
		<BREAK> ";" |
		<RETURN> ( Expression() )? ";"
	)
}

/** \u5f0f */
void Expression() : {}
{
	AssignmentExpression() ( LOOKAHEAD(2) "," AssignmentExpression() )*
}

/**  \u4ee3\u5165\u5f0f */
void AssignmentExpression() : {}
{
	ConditionalExpression()
	(	AssignmentOperator()
		AssignmentExpression()
	)?
}

/** \u4ee3\u5165\u6f14\u7b97\u5b50 */
void AssignmentOperator() : {}
{
	(	<ASSIGN_EQ> |
		<MULT_EQ> |
		<DIV_EQ> |
		<MOD_EQ> |
		<PLUS_EQ> |
		<MINUS_EQ> |
		<SHIFT_LEFT_EQ> |
		<SHIFT_RIGHT_EQ> |
		<BIT_AND_EQ> |
		<BIT_XOR_EQ> |
		<BIT_OR_EQ> )
}

/** \u6bd4\u8f03\u6f14\u7b97\u5f0f */
void ConditionalExpression() : {}
{
	LogicalORExpression()
	(	<QUESTION> ConditionalExpression() <COMMA>/*@bgen(jjtree) #Conditional( 3) */
                                                           {
                                                             ASTConditional jjtn001 = new ASTConditional(JJTCONDITIONAL);
                                                             boolean jjtc001 = true;
                                                             jjtree.openNodeScope(jjtn001);
                                                           }
                                                           try {
/*@egen*/ ConditionalExpression()/*@bgen(jjtree)*/
                                                           } catch (Throwable jjte001) {
                                                             if (jjtc001) {
                                                               jjtree.clearNodeScope(jjtn001);
                                                               jjtc001 = false;
                                                             } else {
                                                               jjtree.popNode();
                                                             }
                                                             if (jjte001 instanceof RuntimeException) {
                                                               throw (RuntimeException)jjte001;
                                                             }
                                                             if (jjte001 instanceof ParseException) {
                                                               throw (ParseException)jjte001;
                                                             }
                                                             throw (Error)jjte001;
                                                           } finally {
                                                             if (jjtc001) {
                                                               jjtree.closeNodeScope(jjtn001,  3);
                                                             }
                                                           }
/*@egen*/                 )?
}

/** \u5b9a\u6570\u5f0f */
void ConstantExpression() : {}
{/*@bgen(jjtree) #Constant( 1) */
        {
          ASTConstant jjtn001 = new ASTConstant(JJTCONSTANT);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
	ConditionalExpression()/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  1);
          }
        }
/*@egen*/             
}

/** \u8ad6\u7406\u548c\u5f0f */
void LogicalORExpression() : {}
{
	LogicalANDExpression()
	(	<OR>/*@bgen(jjtree) #LogicalOR( 2) */
                     {
                       ASTLogicalOR jjtn001 = new ASTLogicalOR(JJTLOGICALOR);
                       boolean jjtc001 = true;
                       jjtree.openNodeScope(jjtn001);
                     }
                     try {
/*@egen*/ LogicalANDExpression()/*@bgen(jjtree)*/
                     } catch (Throwable jjte001) {
                       if (jjtc001) {
                         jjtree.clearNodeScope(jjtn001);
                         jjtc001 = false;
                       } else {
                         jjtree.popNode();
                       }
                       if (jjte001 instanceof RuntimeException) {
                         throw (RuntimeException)jjte001;
                       }
                       if (jjte001 instanceof ParseException) {
                         throw (ParseException)jjte001;
                       }
                       throw (Error)jjte001;
                     } finally {
                       if (jjtc001) {
                         jjtree.closeNodeScope(jjtn001,  2);
                       }
                     }
/*@egen*/               )*
}

/** \u8ad6\u7406\u7a4d\u5f0f */
void LogicalANDExpression() : {}
{
	InclusiveORExpression()
	(	<AND>/*@bgen(jjtree) #LogicalAND( 2) */
                      {
                        ASTLogicalAND jjtn001 = new ASTLogicalAND(JJTLOGICALAND);
                        boolean jjtc001 = true;
                        jjtree.openNodeScope(jjtn001);
                      }
                      try {
/*@egen*/ InclusiveORExpression()/*@bgen(jjtree)*/
                      } catch (Throwable jjte001) {
                        if (jjtc001) {
                          jjtree.clearNodeScope(jjtn001);
                          jjtc001 = false;
                        } else {
                          jjtree.popNode();
                        }
                        if (jjte001 instanceof RuntimeException) {
                          throw (RuntimeException)jjte001;
                        }
                        if (jjte001 instanceof ParseException) {
                          throw (ParseException)jjte001;
                        }
                        throw (Error)jjte001;
                      } finally {
                        if (jjtc001) {
                          jjtree.closeNodeScope(jjtn001,  2);
                        }
                      }
/*@egen*/                )*
}

/** \u30d3\u30c3\u30c8\u8ad6\u7406\u548c\u5f0f */
void InclusiveORExpression() : {}
{
	ExclusiveORExpression()
	(	<BIT_OR>/*@bgen(jjtree) #InclusiveOR( 2) */
                         {
                           ASTInclusiveOR jjtn001 = new ASTInclusiveOR(JJTINCLUSIVEOR);
                           boolean jjtc001 = true;
                           jjtree.openNodeScope(jjtn001);
                         }
                         try {
/*@egen*/ ExclusiveORExpression()/*@bgen(jjtree)*/
                         } catch (Throwable jjte001) {
                           if (jjtc001) {
                             jjtree.clearNodeScope(jjtn001);
                             jjtc001 = false;
                           } else {
                             jjtree.popNode();
                           }
                           if (jjte001 instanceof RuntimeException) {
                             throw (RuntimeException)jjte001;
                           }
                           if (jjte001 instanceof ParseException) {
                             throw (ParseException)jjte001;
                           }
                           throw (Error)jjte001;
                         } finally {
                           if (jjtc001) {
                             jjtree.closeNodeScope(jjtn001,  2);
                           }
                         }
/*@egen*/                 )*
}

/** \u6392\u4ed6\u7684\u30d3\u30c3\u30c8\u8ad6\u7406\u548c */
void ExclusiveORExpression() : {}
{
	ANDExpression()
	(	<BIT_XOR>/*@bgen(jjtree) #ExclusiveOR( 2) */
                          {
                            ASTExclusiveOR jjtn001 = new ASTExclusiveOR(JJTEXCLUSIVEOR);
                            boolean jjtc001 = true;
                            jjtree.openNodeScope(jjtn001);
                          }
                          try {
/*@egen*/ ANDExpression()/*@bgen(jjtree)*/
                          } catch (Throwable jjte001) {
                            if (jjtc001) {
                              jjtree.clearNodeScope(jjtn001);
                              jjtc001 = false;
                            } else {
                              jjtree.popNode();
                            }
                            if (jjte001 instanceof RuntimeException) {
                              throw (RuntimeException)jjte001;
                            }
                            if (jjte001 instanceof ParseException) {
                              throw (ParseException)jjte001;
                            }
                            throw (Error)jjte001;
                          } finally {
                            if (jjtc001) {
                              jjtree.closeNodeScope(jjtn001,  2);
                            }
                          }
/*@egen*/                 )*
}

/** \u30d3\u30c3\u30c8\u8ad6\u7406\u7a4d\u5f0f */
void ANDExpression() : {}
{
	EqualityExpression()
	(	LOOKAHEAD(2) <AMPERSAND>/*@bgen(jjtree) #And( 2) */
                                         {
                                           ASTAnd jjtn001 = new ASTAnd(JJTAND);
                                           boolean jjtc001 = true;
                                           jjtree.openNodeScope(jjtn001);
                                         }
                                         try {
/*@egen*/ EqualityExpression()/*@bgen(jjtree)*/
                                         } catch (Throwable jjte001) {
                                           if (jjtc001) {
                                             jjtree.clearNodeScope(jjtn001);
                                             jjtc001 = false;
                                           } else {
                                             jjtree.popNode();
                                           }
                                           if (jjte001 instanceof RuntimeException) {
                                             throw (RuntimeException)jjte001;
                                           }
                                           if (jjte001 instanceof ParseException) {
                                             throw (ParseException)jjte001;
                                           }
                                           throw (Error)jjte001;
                                         } finally {
                                           if (jjtc001) {
                                             jjtree.closeNodeScope(jjtn001,  2);
                                           }
                                         }
/*@egen*/         )*
}

/** \u6bd4\u8f03\u6f14\u7b97\u5f0f */
void EqualityExpression() : { Token t; }
{
	RelationalExpression()
	(	<EQ>/*@bgen(jjtree) #Equality( 2) */
                     {
                       ASTEquality jjtn001 = new ASTEquality(JJTEQUALITY);
                       boolean jjtc001 = true;
                       jjtree.openNodeScope(jjtn001);
                     }
                     try {
/*@egen*/ RelationalExpression()/*@bgen(jjtree)*/
                     } catch (Throwable jjte001) {
                       if (jjtc001) {
                         jjtree.clearNodeScope(jjtn001);
                         jjtc001 = false;
                       } else {
                         jjtree.popNode();
                       }
                       if (jjte001 instanceof RuntimeException) {
                         throw (RuntimeException)jjte001;
                       }
                       if (jjte001 instanceof ParseException) {
                         throw (ParseException)jjte001;
                       }
                       throw (Error)jjte001;
                     } finally {
                       if (jjtc001) {
                         jjtree.closeNodeScope(jjtn001,  2);
                       }
                     }
/*@egen*/              |
		<NOT_EQ>/*@bgen(jjtree) #NotEquality( 2) */
                         {
                           ASTNotEquality jjtn002 = new ASTNotEquality(JJTNOTEQUALITY);
                           boolean jjtc002 = true;
                           jjtree.openNodeScope(jjtn002);
                         }
                         try {
/*@egen*/ RelationalExpression()/*@bgen(jjtree)*/
                         } catch (Throwable jjte002) {
                           if (jjtc002) {
                             jjtree.clearNodeScope(jjtn002);
                             jjtc002 = false;
                           } else {
                             jjtree.popNode();
                           }
                           if (jjte002 instanceof RuntimeException) {
                             throw (RuntimeException)jjte002;
                           }
                           if (jjte002 instanceof ParseException) {
                             throw (ParseException)jjte002;
                           }
                           throw (Error)jjte002;
                         } finally {
                           if (jjtc002) {
                             jjtree.closeNodeScope(jjtn002,  2);
                           }
                         }
/*@egen*/                
	)*
}

/** \u6bd4\u8f03\u6f14\u7b97\u5f0f */
void RelationalExpression() : { Token t; }
{
	ShiftExpression()
	(	LOOKAHEAD(2) (
			<LT>/*@bgen(jjtree) #RelationalLT( 2) */
                             {
                               ASTRelationalLT jjtn001 = new ASTRelationalLT(JJTRELATIONALLT);
                               boolean jjtc001 = true;
                               jjtree.openNodeScope(jjtn001);
                             }
                             try {
/*@egen*/ ShiftExpression()/*@bgen(jjtree)*/
                             } catch (Throwable jjte001) {
                               if (jjtc001) {
                                 jjtree.clearNodeScope(jjtn001);
                                 jjtc001 = false;
                               } else {
                                 jjtree.popNode();
                               }
                               if (jjte001 instanceof RuntimeException) {
                                 throw (RuntimeException)jjte001;
                               }
                               if (jjte001 instanceof ParseException) {
                                 throw (ParseException)jjte001;
                               }
                               throw (Error)jjte001;
                             } finally {
                               if (jjtc001) {
                                 jjtree.closeNodeScope(jjtn001,  2);
                               }
                             }
/*@egen*/                  |
			<GT>/*@bgen(jjtree) #RelationalGT( 2) */
                             {
                               ASTRelationalGT jjtn002 = new ASTRelationalGT(JJTRELATIONALGT);
                               boolean jjtc002 = true;
                               jjtree.openNodeScope(jjtn002);
                             }
                             try {
/*@egen*/ ShiftExpression()/*@bgen(jjtree)*/
                             } catch (Throwable jjte002) {
                               if (jjtc002) {
                                 jjtree.clearNodeScope(jjtn002);
                                 jjtc002 = false;
                               } else {
                                 jjtree.popNode();
                               }
                               if (jjte002 instanceof RuntimeException) {
                                 throw (RuntimeException)jjte002;
                               }
                               if (jjte002 instanceof ParseException) {
                                 throw (ParseException)jjte002;
                               }
                               throw (Error)jjte002;
                             } finally {
                               if (jjtc002) {
                                 jjtree.closeNodeScope(jjtn002,  2);
                               }
                             }
/*@egen*/                  |
			<LTE>/*@bgen(jjtree) #RelationalLTE( 2) */
                              {
                                ASTRelationalLTE jjtn003 = new ASTRelationalLTE(JJTRELATIONALLTE);
                                boolean jjtc003 = true;
                                jjtree.openNodeScope(jjtn003);
                              }
                              try {
/*@egen*/ ShiftExpression()/*@bgen(jjtree)*/
                              } catch (Throwable jjte003) {
                                if (jjtc003) {
                                  jjtree.clearNodeScope(jjtn003);
                                  jjtc003 = false;
                                } else {
                                  jjtree.popNode();
                                }
                                if (jjte003 instanceof RuntimeException) {
                                  throw (RuntimeException)jjte003;
                                }
                                if (jjte003 instanceof ParseException) {
                                  throw (ParseException)jjte003;
                                }
                                throw (Error)jjte003;
                              } finally {
                                if (jjtc003) {
                                  jjtree.closeNodeScope(jjtn003,  2);
                                }
                              }
/*@egen*/                   |
			<GTE>/*@bgen(jjtree) #RelationalGTE( 2) */
                              {
                                ASTRelationalGTE jjtn004 = new ASTRelationalGTE(JJTRELATIONALGTE);
                                boolean jjtc004 = true;
                                jjtree.openNodeScope(jjtn004);
                              }
                              try {
/*@egen*/ ShiftExpression()/*@bgen(jjtree)*/
                              } catch (Throwable jjte004) {
                                if (jjtc004) {
                                  jjtree.clearNodeScope(jjtn004);
                                  jjtc004 = false;
                                } else {
                                  jjtree.popNode();
                                }
                                if (jjte004 instanceof RuntimeException) {
                                  throw (RuntimeException)jjte004;
                                }
                                if (jjte004 instanceof ParseException) {
                                  throw (ParseException)jjte004;
                                }
                                throw (Error)jjte004;
                              } finally {
                                if (jjtc004) {
                                  jjtree.closeNodeScope(jjtn004,  2);
                                }
                              }
/*@egen*/                  
		)
	)*
}

/** \u30b7\u30d5\u30c8\u6f14\u7b97\u5f0f */
void ShiftExpression() : { Token t; }
{
	AdditiveExpression()
	(	<SHIFT_LEFT>/*@bgen(jjtree) #ShiftLeft( 2) */
                             {
                               ASTShiftLeft jjtn001 = new ASTShiftLeft(JJTSHIFTLEFT);
                               boolean jjtc001 = true;
                               jjtree.openNodeScope(jjtn001);
                             }
                             try {
/*@egen*/ AdditiveExpression()/*@bgen(jjtree)*/
                             } catch (Throwable jjte001) {
                               if (jjtc001) {
                                 jjtree.clearNodeScope(jjtn001);
                                 jjtc001 = false;
                               } else {
                                 jjtree.popNode();
                               }
                               if (jjte001 instanceof RuntimeException) {
                                 throw (RuntimeException)jjte001;
                               }
                               if (jjte001 instanceof ParseException) {
                                 throw (ParseException)jjte001;
                               }
                               throw (Error)jjte001;
                             } finally {
                               if (jjtc001) {
                                 jjtree.closeNodeScope(jjtn001,  2);
                               }
                             }
/*@egen*/               |
		<SHIFT_RIGHT>/*@bgen(jjtree) #ShiftRight( 2) */
                              {
                                ASTShiftRight jjtn002 = new ASTShiftRight(JJTSHIFTRIGHT);
                                boolean jjtc002 = true;
                                jjtree.openNodeScope(jjtn002);
                              }
                              try {
/*@egen*/ AdditiveExpression()/*@bgen(jjtree)*/
                              } catch (Throwable jjte002) {
                                if (jjtc002) {
                                  jjtree.clearNodeScope(jjtn002);
                                  jjtc002 = false;
                                } else {
                                  jjtree.popNode();
                                }
                                if (jjte002 instanceof RuntimeException) {
                                  throw (RuntimeException)jjte002;
                                }
                                if (jjte002 instanceof ParseException) {
                                  throw (ParseException)jjte002;
                                }
                                throw (Error)jjte002;
                              } finally {
                                if (jjtc002) {
                                  jjtree.closeNodeScope(jjtn002,  2);
                                }
                              }
/*@egen*/               
	)*
}

/** \u7b97\u8853\u548c/\u7b97\u8853\u5dee\u5f0f */
void AdditiveExpression() : { Token t; }
{
	MultiplicativeExpression()
	(	LOOKAHEAD(2) (
			t=<PLUS>/*@bgen(jjtree) #AdditivePlus( 2) */
                                 {
                                   ASTAdditivePlus jjtn001 = new ASTAdditivePlus(JJTADDITIVEPLUS);
                                   boolean jjtc001 = true;
                                   jjtree.openNodeScope(jjtn001);
                                 }
                                 try {
/*@egen*/ MultiplicativeExpression()/*@bgen(jjtree)*/
                                 } catch (Throwable jjte001) {
                                   if (jjtc001) {
                                     jjtree.clearNodeScope(jjtn001);
                                     jjtc001 = false;
                                   } else {
                                     jjtree.popNode();
                                   }
                                   if (jjte001 instanceof RuntimeException) {
                                     throw (RuntimeException)jjte001;
                                   }
                                   if (jjte001 instanceof ParseException) {
                                     throw (ParseException)jjte001;
                                   }
                                   throw (Error)jjte001;
                                 } finally {
                                   if (jjtc001) {
                                     jjtree.closeNodeScope(jjtn001,  2);
                                   }
                                 }
/*@egen*/                  |
			t=<MINUS>/*@bgen(jjtree) #AdditiveMinus( 2) */
                                  {
                                    ASTAdditiveMinus jjtn002 = new ASTAdditiveMinus(JJTADDITIVEMINUS);
                                    boolean jjtc002 = true;
                                    jjtree.openNodeScope(jjtn002);
                                  }
                                  try {
/*@egen*/ MultiplicativeExpression()/*@bgen(jjtree)*/
                                  } catch (Throwable jjte002) {
                                    if (jjtc002) {
                                      jjtree.clearNodeScope(jjtn002);
                                      jjtc002 = false;
                                    } else {
                                      jjtree.popNode();
                                    }
                                    if (jjte002 instanceof RuntimeException) {
                                      throw (RuntimeException)jjte002;
                                    }
                                    if (jjte002 instanceof ParseException) {
                                      throw (ParseException)jjte002;
                                    }
                                    throw (Error)jjte002;
                                  } finally {
                                    if (jjtc002) {
                                      jjtree.closeNodeScope(jjtn002,  2);
                                    }
                                  }
/*@egen*/                  
		)
	)*
}

/** \u7b97\u8853\u9664\u7a4d\u5f0f */
void MultiplicativeExpression() : { Token t; }
{
	PmExpression()
	(	LOOKAHEAD(2) ( <STAR> | <DIV> | <MOD> )/*@bgen(jjtree) #Multiplicative( 2) */
                                                        {
                                                          ASTMultiplicative jjtn001 = new ASTMultiplicative(JJTMULTIPLICATIVE);
                                                          boolean jjtc001 = true;
                                                          jjtree.openNodeScope(jjtn001);
                                                        }
                                                        try {
/*@egen*/ PmExpression()/*@bgen(jjtree)*/
                                                        } catch (Throwable jjte001) {
                                                          if (jjtc001) {
                                                            jjtree.clearNodeScope(jjtn001);
                                                            jjtc001 = false;
                                                          } else {
                                                            jjtree.popNode();
                                                          }
                                                          if (jjte001 instanceof RuntimeException) {
                                                            throw (RuntimeException)jjte001;
                                                          }
                                                          if (jjte001 instanceof ParseException) {
                                                            throw (ParseException)jjte001;
                                                          }
                                                          throw (Error)jjte001;
                                                        } finally {
                                                          if (jjtc001) {
                                                            jjtree.closeNodeScope(jjtn001,  2);
                                                          }
                                                        }
/*@egen*/                    )*
}

/** \u30dd\u30a4\u30f3\u30bf\u53c2\u7167\u5f0f */
void PmExpression() : { Token t; }
{
    CastExpression()
    (	( <DOTSTAR> | <ARROWSTAR> )
    	CastExpression()
    )*
}

/** \u30ad\u30e3\u30b9\u30c8\u6f14\u7b97\u5f0f */
void CastExpression() : { Token t; }
{
	LOOKAHEAD( "(" TypeName() ")" ) "(" TypeName() ")" CastExpression() |
	UnaryExpression()
}

/** \u5358\u9805\u6f14\u7b97\u5f0f */
void UnaryExpression() : {}
{
	<PLUSPLUS> UnaryExpression() |
	<MINUSMINUS> UnaryExpression() |
	LOOKAHEAD(3) UnaryOperator() CastExpression() |
	<SIZEOF> (
		LOOKAHEAD( "(" TypeName() ")" ) "(" TypeName() ")" |
		UnaryExpression()
	) |
	PostfixExpression()
}

/** \u5358\u9805\u6f14\u7b97\u5b50 */
void UnaryOperator() : { Token t; }
{
	(	<AMPERSAND> |
		<STAR> |
		<PLUS> |
		<MINUS> |
		<TILDE> |
		<NOT>
	)
}

/** \u5f8c\u7f6e\u6f14\u7b97\u5f0f */
void PostfixExpression() : { Token t; }
{
	LOOKAHEAD(3) PrimaryExpression()
	(	LOOKAHEAD(2) (
			"[" Expression() "]" |
			"(" ( ArgumentExpressionList() )? ")" |
			"." <IDENTIFIER> |
			<POINTERTO> <IDENTIFIER> |
			<PLUSPLUS> |
			<MINUSMINUS>
		)
	)* |
	TypeSpecifier() "(" ( ArgumentExpressionList() )? ")"
}

/** \u512a\u5148\u6f14\u7b97\u5f0f */
void PrimaryExpression() : {}
{
	(	<IDENTIFIER> |
		Constant() |
		"(" Expression() ")"
	)
}

/** \u5f15\u6570\u5f0f\u30ea\u30b9\u30c8 */
void ArgumentExpressionList() : {}
{
	AssignmentExpression()
	(	"," AssignmentExpression() )*
}

void Identifier()             : {/*@bgen(jjtree) Identifier */
                                  ASTIdentifier jjtn000 = new ASTIdentifier(JJTIDENTIFIER);
                                  boolean jjtc000 = true;
                                  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t;}
{/*@bgen(jjtree) Identifier */
        try {
/*@egen*/
	t=<IDENTIFIER>/*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                       }
/*@egen*/ { jjtn000.setName(t.image); }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/** \u5b9a\u6570 */
void Constant() : { Token t; }
{
	t=<INTEGER_LITERAL>/*@bgen(jjtree) IntegerConst */
                            {
                              ASTIntegerConst jjtn001 = new ASTIntegerConst(JJTINTEGERCONST);
                              boolean jjtc001 = true;
                              jjtree.openNodeScope(jjtn001);
                            }
                            try {
/*@egen*//*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn001, true);
                              jjtc001 = false;
                            }
/*@egen*/ {
		jjtn001.jjtSetValue(t.image);
	}/*@bgen(jjtree)*/
                            } finally {
                              if (jjtc001) {
                                jjtree.closeNodeScope(jjtn001, true);
                              }
                            }
/*@egen*/               |
	t=<FLOATING_POINT_LITERAL>/*@bgen(jjtree) FloatConst */
                                   {
                                     ASTFloatConst jjtn002 = new ASTFloatConst(JJTFLOATCONST);
                                     boolean jjtc002 = true;
                                     jjtree.openNodeScope(jjtn002);
                                   }
                                   try {
/*@egen*//*@bgen(jjtree)*/
                                   {
                                     jjtree.closeNodeScope(jjtn002, true);
                                     jjtc002 = false;
                                   }
/*@egen*/ {
		jjtn002.jjtSetValue(t.image);
	}/*@bgen(jjtree)*/
                                   } finally {
                                     if (jjtc002) {
                                       jjtree.closeNodeScope(jjtn002, true);
                                     }
                                   }
/*@egen*/             |
	t=<CHARACTER_LITERAL>/*@bgen(jjtree) CharConst */
                              {
                                ASTCharConst jjtn003 = new ASTCharConst(JJTCHARCONST);
                                boolean jjtc003 = true;
                                jjtree.openNodeScope(jjtn003);
                              }
                              try {
/*@egen*//*@bgen(jjtree)*/
                              {
                                jjtree.closeNodeScope(jjtn003, true);
                                jjtc003 = false;
                              }
/*@egen*/ {
		jjtn003.jjtSetValue(t.image);
	}/*@bgen(jjtree)*/
                              } finally {
                                if (jjtc003) {
                                  jjtree.closeNodeScope(jjtn003, true);
                                }
                              }
/*@egen*/            |
	t=<STRING_LITERAL>/*@bgen(jjtree) StringConst */
                           {
                             ASTStringConst jjtn004 = new ASTStringConst(JJTSTRINGCONST);
                             boolean jjtc004 = true;
                             jjtree.openNodeScope(jjtn004);
                           }
                           try {
/*@egen*//*@bgen(jjtree)*/
                           {
                             jjtree.closeNodeScope(jjtn004, true);
                             jjtc004 = false;
                           }
/*@egen*/ {
		jjtn004.jjtSetValue(t.image);
	}/*@bgen(jjtree)*/
                           } finally {
                             if (jjtc004) {
                               jjtree.closeNodeScope(jjtn004, true);
                             }
                           }
/*@egen*/             
}