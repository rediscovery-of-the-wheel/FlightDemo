/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. script.jj */
/*@egen*/options {
  JAVA_UNICODE_ESCAPE = true;
  ERROR_REPORTING = true;
  DEBUG_PARSER = true;
  STATIC = false;
  JDK_VERSION = "1.6";
             
                           
               
}

PARSER_BEGIN(ScriptParser)

package com.serenegiant.lang.script;
import android.util.Log;
import java.util.*;

public class ScriptParser/*@bgen(jjtree)*/implements ScriptParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTScriptParserState jjtree = new JJTScriptParserState();

/*@egen*/

	private static final String TAG = "ScriptParser";

	/** \u30b7\u30f3\u30dc\u30eb\u30c6\u30fc\u30d6\u30eb */
	private final java.util.Map<String, Object> symbols = new java.util.LinkedHashMap<String, Object>();

	/** \u6f14\u7b97\u7528\u306e\u30b9\u30bf\u30c3\u30af */
	private Object[] stack = new Object[1024];
	private int top = -1;

	/* \u6f14\u7b97\u7528\u306e\u30b9\u30bf\u30c3\u30af\u306b\u5024\u3092\u30d7\u30c3\u30b7\u30e5 */
	public void push_op(Object op) {
		stack[++top] = op;
	}

	/* \u6f14\u7b97\u7528\u306e\u30b9\u30bf\u30c3\u30af\u306b\u5024\u3092\u30d7\u30c3\u30b7\u30e5 */
	public void push_op(int index, Object op) {
		top += index;
		stack[top] = op;
	}

	/* \u6f14\u7b97\u7528\u306e\u30b9\u30bf\u30c3\u30af\u304b\u3089\u5024\u3092\u53d6\u5f97 */
	public Object pop_op() {
		return stack[top--];
	}

	/* \u6f14\u7b97\u7528\u306e\u30b9\u30bf\u30c3\u30af\u306e\u4e0a\u304b\u3089\u6307\u5b9a\u3057\u305f\u756a\u53f7\u306e\u5024\u3092\u53d6\u5f97(\u30b9\u30bf\u30c3\u30af\u304b\u3089\u306f\u53d6\u308a\u51fa\u3055\u306a\u3044) */
	public Object peek_op(int index) {
		return stack[top + index];
	}

	/* \u30b7\u30f3\u30dc\u30eb\u3092\u767b\u9332 */
	public void add_symbol(String symbol, Object value) {
		symbols.put(symbol, value);
	}

	/* \u30b7\u30f3\u30dc\u30eb\u306b\u5bfe\u5fdc\u3059\u308b\u5024\u3092\u53d6\u5f97, \u30b7\u30f3\u30dc\u30eb\u30c6\u30fc\u30d6\u30eb\u306b\u5b58\u5728\u3057\u306a\u3051\u308c\u3070null */
	public Object get_symbol(String symbol) {
		if (symbols.containsKey(symbol)) {
			return symbols.get(symbol);
		} else {
			return null;
		}
	}

	/* \u30b7\u30f3\u30dc\u30eb\u304c\u30b7\u30f3\u30dc\u30eb\u30c6\u30fc\u30d6\u30eb\u306b\u767b\u9332\u3055\u308c\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3092\u53d6\u5f97 */
	public boolean symbol_exist(String symbol) {
		return symbols.containsKey(symbol);
	}

    /** typedef\u3067\u5ba3\u8a00\u3057\u305f\u578b\u540d\u4fdd\u6301\u7528 */
    private final Set types = new HashSet();

    /** \u30d1\u30fc\u30b5\u30fc\u304ctypedef\u306e\u51e6\u7406\u4e2d\u304b\u3069\u3046\u304b\u3092\u4fdd\u6301\u3059\u308b\u305f\u3081 */
    private final Stack typedefParsingStack = new Stack();

    /** \u6307\u5b9a\u3057\u305f\u8b58\u5225\u5b50\u304ctypedef\u3067\u5b9a\u7fa9\u3057\u305f\u578b\u540d\u304b\u3069\u3046\u304b\u3092\u8fd4\u3059 */
    private boolean isType(String type){
		return types.contains(type);
    }

    /** typedef\u7528\u306b\u578b\u540d\u3092\u8ffd\u52a0 */
    private void addType(String type) {
		types.add(type);
    }

    /** typedef\u3067\u5b9a\u7fa9\u3057\u305f\u578b\u540d\u306e\u4e00\u89a7\u3092\u51fa\u529b */
    private void printTypes(){
		for (Iterator i = types.iterator(); i.hasNext();) {
			System.out.println(i.next());
		}
    }

    // \u30d1\u30fc\u30b5\u30fc\u3092\u751f\u6210
    public static ScriptParser createInstance(java.io.InputStream in) {
		final ScriptParser parser = new ScriptParser(in);
		// Hack to include type "special types"
	    parser.types.add("__signed__");
	    parser.types.add("__const");
	    parser.types.add("__inline__");
	    parser.types.add("__signed");
		return parser;
	}
}

PARSER_END(ScriptParser)

/** \u7a7a\u767d */
SKIP : {
	" " |
	"\t" |
	"\n" |
	"\r" |
	<"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")> |
	<"/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/"> |
	"#" : PREPROCESSOR_OUTPUT
}

<PREPROCESSOR_OUTPUT> SKIP:
{
     "\n" : DEFAULT
}

<PREPROCESSOR_OUTPUT> MORE:
{
	"\\\n" |
	"\\\r\n" |
	< ~[] >
}


/** \u6570\u5b57/\u6587\u5b57(\u5217)\u5b9a\u6570\u7528\u30c8\u30fc\u30af\u30f3 */
TOKEN : {
	<INTEGER_LITERAL: <DECIMAL_LITERAL> (["l","L"])? | <HEX_LITERAL> (["l","L"])? | <OCTAL_LITERAL> (["l","L"])?> |
	<#DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])*> |
	<#HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+> |
	<#OCTAL_LITERAL: "0" (["0"-"7"])*> |
	<FLOATING_POINT_LITERAL: (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])? | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])? | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])? | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]> |
	<#EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+> |
	<CHARACTER_LITERAL: "\'" (~["\'","\\","\n","\r"] | "\\" (["n","t","b","r","f","\\","\'","\""] | ["0"-"7"] (["0"-"7"])? | ["0"-"3"] ["0"-"7"] ["0"-"7"])) "\'"> |
	<STRING_LITERAL: "\"" ( ~["\"","\\","\n","\r"] | "\\" ( ["n","t","b","r","f","\\","\'","\""] | ["0"-"7"] (["0"-"7"])?  | ["0"-"3"] ["0"-"7"] ["0"-"7"] | ( ["\n","\r"] | "\r\n")))* "\"">
}

/** \u4e88\u7d04\u8a9e\u3068\u5b9a\u6570\u7528\u306e\u30c8\u30fc\u30af\u30f3 */
TOKEN : {
	<CONTINUE: "continue"> |
	<VOLATILE: "volatile"> |
	<REGISTER: "register"> |
	<UNSIGNED: "unsigned"> |
	<TYPEDEF: "typedef"> |
	<DFLT: "default"> |
	<DOUBLE: "double"> |
	<SIZEOF: "sizeof"> |
	<SWITCH: "switch"> |
	<RETURN: "return"> |
	<EXTERN: "extern"> |
	<STRUCT: "struct"> |
	<STATIC: "static"> |
	<SIGNED: "signed"> |
	<WHILE: "while"> |
	<BREAK: "break"> |
	<UNION: "union"> |
	<CONST: "const"> |
	<FLOAT: "float"> |
	<SHORT: "short"> |
	<ELSE: "else"> |
	<CASE: "case"> |
	<LONG: "long"> |
	<ENUM: "enum"> |
	<AUTO: "auto"> |
	<VOID: "void"> |
	<CHAR: "char"> |
	<GOTO: "goto"> |
	<FOR: "for"> |
	<INT: "int"> |
	<IF: "if"> |
	<DO: "do">
}

/** \u8b58\u5225\u5b50\u7528\u306e\u30c8\u30fc\u30af\u30f3 */
TOKEN : {
	<IDENTIFIER: <LETTER> (<LETTER> | <DIGIT>)*> |
	<#LETTER: ["$","A"-"Z","_","a"-"z"]> |
	<#DIGIT: ["0"-"9"]>
}

/**************************************************
 * \u3053\u3053\u304b\u3089\u4e0b\u304c\u6587\u6cd5(\u751f\u6210\u898f\u5247)
 **************************************************/
/** \u3053\u308c\u304c\u89e3\u6790\u306e\u30a8\u30f3\u30c8\u30ea\u30dd\u30a4\u30f3\u30c8 */
void TranslationUnit() : {}
{
	(ExternalDeclaration())+
	{	printTypes();
		Log.i(TAG, "\u89e3\u6790\u7d42\u4e86");
	}
}

/** \u5916\u90e8\u5ba3\u8a00 */
void ExternalDeclaration() : {}
{
	(	LOOKAHEAD( FunctionDefinition() ) FunctionDefinition() |
		Declaration()
	)
}

/** \u95a2\u6570\u5b9a\u7fa9 */
void FunctionDefinition() : {}
{
	[LOOKAHEAD(DeclarationSpecifiers()) DeclarationSpecifiers()] Declarator() [ DeclarationList() ]
	CompoundStatement()
}

/** \u5ba3\u8a00 */
void Declaration() : {}
{
	DeclarationSpecifiers() [ InitDeclaratorList() ] ";"
}

/** \u5ba3\u8a00\u306e\u7a2e\u985e(\u578b)\u30ea\u30b9\u30c8 */
void DeclarationList() : {}
{
	( LOOKAHEAD(Declaration()) Declaration() )+
}

/** \u5ba3\u8a00\u306e\u30a2\u30af\u30bb\u30b9\u6307\u5b9a\u5b50 */
void DeclarationSpecifiers() : {}
{
	StorageClassSpecifier() [ LOOKAHEAD(DeclarationSpecifiers()) DeclarationSpecifiers() ] |
	TypeSpecifier()  [ LOOKAHEAD(DeclarationSpecifiers()) DeclarationSpecifiers() ] |
	TypeQualifier() [ LOOKAHEAD(DeclarationSpecifiers()) DeclarationSpecifiers() ]
}

/** \u5909\u6570\u30fb\u578b\u306e\u30a2\u30af\u30bb\u30b9\u6307\u5b9a\u5b50 */
void StorageClassSpecifier() : {}
{
	( <AUTO> | <REGISTER> | <STATIC> | <EXTERN> | <TYPEDEF>
		{
			typedefParsingStack.push(Boolean.TRUE);
		}
	)
}

/** \u578b\u306e\u7a2e\u985e */
void TypeSpecifier() : {}
{
	(	<VOID> | <CHAR> | <SHORT> | <INT> | <LONG> | <FLOAT> | <DOUBLE> | <SIGNED> |
		<UNSIGNED> | StructOrUnionSpecifier() | EnumSpecifier() | LOOKAHEAD( { isType(getToken(1).image) } )TypedefName()
	)
}

/** \u5b9a\u6570\u578b */
void TypeQualifier() : {}
{
	( <CONST> | <VOLATILE> )
	{ Log.v(TAG, "\u5b9a\u6570\u578b"); }
}

/** \u69cb\u9020\u4f53/\u30e6\u30cb\u30aa\u30f3\u30a2\u30af\u30bb\u30b9\u6307\u5b9a\u5b50 */
void StructOrUnionSpecifier() : {}
{
	{
		typedefParsingStack.push(Boolean.FALSE);
	}

	StructOrUnion() ( LOOKAHEAD(3) [ <IDENTIFIER> ] "{" StructDeclarationList() "}" | <IDENTIFIER> )

	{
		typedefParsingStack.pop();
	}
}

/** \u69cb\u9020\u4f53/\u30e6\u30cb\u30aa\u30f3 */
void StructOrUnion() : {}
{
	( <STRUCT> | <UNION> )
}

/** \u69cb\u9020\u4f53/\u30e6\u30cb\u30aa\u30f3\u5ba3\u8a00\u30ea\u30b9\u30c8 */
void StructDeclarationList() : {}
{
	( StructDeclaration() )+
}

/** \u69cb\u9020\u4f53/\u30e6\u30cb\u30aa\u30f3\u5ba3\u8a00 */
void StructDeclaration() : {}
{
	SpecifierQualifierList() StructDeclaratorList() ";"
}

/** \u69cb\u9020\u4f53/\u30e6\u30cb\u30aa\u30f3\u306e\u5b9a\u7fa9\u5185\u5bb9\u30ea\u30b9\u30c8 */
void StructDeclaratorList() : {}
{
	StructDeclarator() ( "," StructDeclarator() )*
}

/** \u69cb\u9020\u4f53/\u30e6\u30cb\u30aa\u30f3\u306e\u5b9a\u7fa9\u5185\u5bb9 */
void StructDeclarator() : {}
{
	( LOOKAHEAD(3) Declarator() | [ Declarator() ] ":" ConstantExpression() )
}

/** \u521d\u671f\u5316\u4ed8\u304d\u5ba3\u8a00\u30ea\u30b9\u30c8 */
void InitDeclaratorList() : {}
{
	InitDeclarator() ("," InitDeclarator())*
	{
		// Finished with a typedefDeclaration??
		if(!(typedefParsingStack.empty()) && ((Boolean)typedefParsingStack.peek()).booleanValue()) {
			typedefParsingStack.pop();
		}
		Log.v(TAG, "\u521d\u671f\u5316\u4ed8\u304d\u5ba3\u8a00\u30ea\u30b9\u30c8");
	}
}

/** \u521d\u671f\u5316\u4ed8\u304d\u5ba3\u8a00 */
void InitDeclarator() : {}
{
	Declarator() [ "=" Initializer() ]
	{ Log.v(TAG, "\u521d\u671f\u5316\u4ed8\u304d\u5ba3\u8a00"); }
}

/** \u30a2\u30af\u30bb\u30b9\u6307\u5b9a\u5b50 */
void SpecifierQualifierList() : {}
{
	TypeSpecifier() [ LOOKAHEAD(SpecifierQualifierList())
		SpecifierQualifierList() ] |
	TypeQualifier() [ LOOKAHEAD(SpecifierQualifierList())
		SpecifierQualifierList() ]
}

/** \u5217\u6319\u578b */
void EnumSpecifier() : {}
{
	<ENUM> ( LOOKAHEAD(3) [ <IDENTIFIER> ] "{" EnumeratorList() "}" | <IDENTIFIER> )
}

/** \u5217\u6319\u578b\u306e\u5ba3\u8a00\u30ea\u30b9\u30c8 */
void EnumeratorList() : {}
{
	Enumerator() ("," Enumerator())*
}

/** \u5217\u6319\u578b\u306e\u30a2\u30a4\u30c6\u30e0\uff11\u3064\u5206 */
void Enumerator() : {}
{
	<IDENTIFIER> [ "=" ConstantExpression() ]
}

/** \u5ba3\u8a00\u5b50 */
void Declarator() : {}
{
	[ Pointer() ] DirectDeclarator()
}

/** \u76f4\u63a5\u5ba3\u8a00\u5b50 */
void DirectDeclarator() : { Token t;}
{
	(	t = <IDENTIFIER>
		{
			if(!(typedefParsingStack.empty()) && ((Boolean)typedefParsingStack.peek()).booleanValue()) {
				addType(t.image);
			}
		} |
		"(" Declarator() ")"
	)

	{ typedefParsingStack.push( Boolean.FALSE ); }

	(	"[" [ ConstantExpression() ] "]" |
		LOOKAHEAD(3) "(" ParameterTypeList() ")" |
		"(" [ IdentifierList() ] ")"
	)*

	{ typedefParsingStack.pop(); }
}

/** \u30dd\u30a4\u30f3\u30bf\u6307\u5b9a\u5b50 */
void Pointer() : {}
{
	"*" [ TypeQualifierList() ] [ Pointer() ]
}

/** \u578b\u6307\u5b9a\u5b50 */
void TypeQualifierList() : {}
{
	(TypeQualifier())+
}

/** \u30d1\u30e9\u30e1\u30fc\u30bf\u30bf\u30a4\u30d7\u30ea\u30b9\u30c8 */
void ParameterTypeList() : {}
{
	ParameterList() ["," "..." ]
}

/** \u30d1\u30e9\u30e1\u30fc\u30bf\u30ea\u30b9\u30c8 */
void ParameterList() : {}
{
	ParameterDeclaration() (LOOKAHEAD(2) "," ParameterDeclaration())*
}

/** \u30d1\u30e9\u30e1\u30fc\u30bf\u5ba3\u8a00 */
void ParameterDeclaration() : {}
{
	DeclarationSpecifiers() ( LOOKAHEAD(Declarator()) Declarator() | [ AbstractDeclarator() ] )
}

/** \u8b58\u5225\u5b50\u30ea\u30b9\u30c8 */
void IdentifierList() : {}
{
	<IDENTIFIER> ("," <IDENTIFIER>)*
}

/** \u30a4\u30cb\u30b7\u30e3\u30e9\u30a4\u30b6 */
void Initializer() : {}
{
	(	AssignmentExpression() |
		"{" InitializerList() [","] "}"
	)
}

/** \u30a4\u30cb\u30b7\u30e3\u30e9\u30a4\u30b6\u30ea\u30b9\u30c8 */
void InitializerList() : {}
{
	Initializer() (LOOKAHEAD(2) "," Initializer())*
}

/** \u578b\u540d */
void TypeName() : {}
{
	SpecifierQualifierList() [ AbstractDeclarator() ]
}

void AbstractDeclarator() : {}
{
	( LOOKAHEAD(3) Pointer() |
		[Pointer()] DirectAbstractDeclarator()
	)
}

void DirectAbstractDeclarator() : {}
{
	( LOOKAHEAD(2) "(" AbstractDeclarator() ")" |
	               "[" [ConstantExpression()] "]" |
	               "(" [ParameterTypeList()] ")" )

	  ( "[" [ ConstantExpression() ] "]" | "(" [ ParameterTypeList() ] ")" )*
}

/** typedef\u540d */
void TypedefName() : {}
{
	<IDENTIFIER>
}

/** \u547d\u4ee4\u6587 */
void Statement() : {}
{
	( LOOKAHEAD(2) LabeledStatement() |
	  ExpressionStatement() |
	  CompoundStatement() |
	  SelectionStatement() |
	  IterationStatement() |
	  JumpStatement() )
}

/** \u30e9\u30d9\u30eb\u547d\u4ee4: */
void LabeledStatement() : {}
{
	(	<IDENTIFIER> ":" Statement() |
		<CASE> ConstantExpression() ":" Statement() |
		<DFLT> ":" Statement()
	)
}

/** \u6f14\u7b97\u547d\u4ee4\u6587 */
void ExpressionStatement() : {}
{
	[ Expression() ] ";"
}

/** \u547d\u4ee4\u6587 */
void CompoundStatement() : {}
{
	"{" [ LOOKAHEAD(DeclarationList()) DeclarationList() ]
	    [ StatementList() ]
	"}"
}

/** \u547d\u4ee4\u6587\u30ea\u30b9\u30c8 */
void StatementList() : {}
{
	(Statement())+
}

/** \u9078\u629e\u547d\u4ee4\u6587 */
void SelectionStatement() : {}
{
	(	<IF> "(" Expression() ")" Statement() [ LOOKAHEAD(2) <ELSE> Statement() ] |
		<SWITCH> "(" Expression() ")" Statement()
	)
}

/** \u5217\u6319\u547d\u4ee4 */
void IterationStatement() : {}
{
	(	<WHILE> "(" Expression() ")" Statement() |
		<DO> Statement() <WHILE> "(" Expression() ")" ";" |
		<FOR> "(" [ Expression() ] ";" [ Expression() ] ";" [ Expression() ] ")" Statement()
	)
}

/** \u30b8\u30e3\u30f3\u30d7\u547d\u4ee4 */
void JumpStatement() : {}
{
	(	<GOTO> <IDENTIFIER> ";" |
		<CONTINUE> ";" |
		<BREAK> ";" |
		<RETURN> [ Expression() ] ";"
	)
}

/** \u5f0f */
void Expression() : {}
{
	AssignmentExpression() ( "," AssignmentExpression() )*
}

/**  \u4ee3\u5165\u5f0f */
void AssignmentExpression() : {}
{
	LOOKAHEAD(UnaryExpression() AssignmentOperator()) UnaryExpression() AssignmentOperator() AssignmentExpression() |
	LOOKAHEAD(3) ConditionalExpression()
}

/** \u4ee3\u5165\u6f14\u7b97\u5b50 */
void AssignmentOperator() : {}
{
	( "=" | "*=" | "/=" | "%=" | "+=" | "-=" | "<<=" | ">>=" | "&=" | "^=" | "|=" )
}

/** \u6bd4\u8f03\u6f14\u7b97\u5f0f */
void ConditionalExpression() : {}
{
	LogicalORExpression() [ "?" Expression() ":" ConditionalExpression() ]
}

/** \u5b9a\u6570\u5f0f */
void ConstantExpression() : {}
{
	ConditionalExpression()
}

/** \u8ad6\u7406\u548c\u5f0f */
void LogicalORExpression() : {}
{
	LogicalANDExpression() [ "||" LogicalORExpression() ]
}

/** \u8ad6\u7406\u7a4d\u5f0f */
void LogicalANDExpression() : {}
{
	InclusiveORExpression() [ "&&" LogicalANDExpression() ]
}

/** \u30d3\u30c3\u30c8\u8ad6\u7406\u548c\u5f0f */
void InclusiveORExpression() : {}
{
	ExclusiveORExpression() [ "|" InclusiveORExpression() ]
}

/** \u6392\u4ed6\u7684\u30d3\u30c3\u30c8\u8ad6\u7406\u548c */
void ExclusiveORExpression() : {}
{
	ANDExpression() [ "^" ExclusiveORExpression() ]
}

/** \u30d3\u30c3\u30c8\u8ad6\u7406\u7a4d\u5f0f */
void ANDExpression() : {}
{
	EqualityExpression() [ "&" ANDExpression() ]
}

/** \u6bd4\u8f03\u6f14\u7b97\u5f0f */
void EqualityExpression() : {}
{
	RelationalExpression() [ ( "==" | "!=" ) EqualityExpression() ]
}

/** \u6bd4\u8f03\u6f14\u7b97\u5f0f */
void RelationalExpression() : {}
{
	ShiftExpression() [ ( "<" | ">" | "<=" | ">=" ) RelationalExpression() ]
}

/** \u30b7\u30d5\u30c8\u6f14\u7b97\u5f0f */
void ShiftExpression() : {}
{
	AdditiveExpression() [ ( "<<" | ">>" ) ShiftExpression() ]
}

/** \u7b97\u8853\u548c/\u7b97\u8853\u5dee\u5f0f */
void AdditiveExpression() : {}
{
	MultiplicativeExpression() [ ( "+" | "-" ) AdditiveExpression() ]
}

/** \u7b97\u8853\u9664\u7a4d\u5f0f */
void MultiplicativeExpression() : {}
{
	CastExpression() [ ( "*" | "/" | "%" ) MultiplicativeExpression() ]
}

/** \u30ad\u30e3\u30b9\u30c8\u6f14\u7b97\u5f0f */
void CastExpression() : {}
{
	( LOOKAHEAD("(" TypeName() ")" CastExpression() ) "(" TypeName() ")" CastExpression() |
	  UnaryExpression() )
}

/** \u5358\u9805\u6f14\u7b97\u5f0f */
void UnaryExpression() : {}
{
	( LOOKAHEAD(3) PostfixExpression() |
		"++" UnaryExpression() |
		"--" UnaryExpression() |
		UnaryOperator() CastExpression() |
		<SIZEOF> ( LOOKAHEAD(UnaryExpression() ) UnaryExpression() | "(" TypeName() ")" )
	)
}

/** \u5358\u9805\u6f14\u7b97\u5b50 */
void UnaryOperator() : {}
{
	( "&" | "*" | "+" | "-" | "~" | "!" )
}

/** \u5f8c\u7f6e\u6f14\u7b97\u5f0f */
void PostfixExpression() : {}
{
	PrimaryExpression() ( "[" Expression() "]" |
	                      "(" [ LOOKAHEAD(ArgumentExpressionList() ) ArgumentExpressionList() ] ")" |
	  					  "." <IDENTIFIER> |
	  					  "->" <IDENTIFIER> |
	  					  "++" |
	  					  "--" )*
}

/** \u512a\u5148\u6f14\u7b97\u5f0f */
void PrimaryExpression() : {}
{
	(	<IDENTIFIER> |
		Constant() |
		"(" Expression() ")"
	)
}

/** \u5f15\u6570\u5f0f\u30ea\u30b9\u30c8 */
void ArgumentExpressionList() : {}
{
	AssignmentExpression() ( "," AssignmentExpression() )*
}

/** \u5b9a\u6570 */
void Constant() : {}
{
	<INTEGER_LITERAL> |
	<FLOATING_POINT_LITERAL> |
	<CHARACTER_LITERAL> |
	<STRING_LITERAL>
}