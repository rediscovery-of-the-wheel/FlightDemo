/* Generated By:JavaCC: Do not edit this line. ScriptParserDefaultVisitor.java Version 6.1_2 */
package com.serenegiant.lang.script;

public class ScriptParserDefaultVisitor implements ScriptParserVisitor{
  public Object defaultVisit(SimpleNode node, Object data){
    node.childrenAccept(this, data);
    return data;
  }
  public Object visit(SimpleNode node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTParse node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTStatementIf node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTStatementSwitch node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTStatementWhile node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTStatementDoWhile node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTForInitStatement node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTExpressionStatement node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTForUpdateStatement node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTConditional node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTConstant node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTLogicalOR node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTLogicalAND node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTInclusiveOR node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTExclusiveOR node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTAnd node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTEquality node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTNotEquality node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTRelationalLT node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTRelationalGT node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTRelationalLTE node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTRelationalGTE node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTShiftLeft node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTShiftRight node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTAdditivePlus node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTAdditiveMinus node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTMultiplicative node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTIdentifier node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTIntegerConst node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTFloatConst node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTCharConst node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTStringConst node, Object data){
    return defaultVisit(node, data);
  }
}
/* JavaCC - OriginalChecksum=32ba14098a5128d418e4276a715c1934 (do not edit this line) */
