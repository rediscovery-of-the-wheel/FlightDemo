/* ScriptParser.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. ScriptParser.java */
package com.serenegiant.lang.script;
import android.util.Log;
import java.util.*;

public class ScriptParser/*@bgen(jjtree)*/implements ScriptParserTreeConstants, ScriptParserConstants {/*@bgen(jjtree)*/
  protected JJTScriptParserState jjtree = new JJTScriptParserState();
        private static final String TAG = "ScriptParser";

        /** シンボルテーブル */
        private final java.util.Map<String, Object> symbols = new java.util.LinkedHashMap<String, Object>();

        /** 演算用のスタック */
        private Object[] stack = new Object[1024];
        private int top = -1;

        /* 演算用のスタックに値をプッシュ */
        public void push_op(Object op) {
                stack[++top] = op;
        }

        /* 演算用のスタックに値をプッシュ */
        public void push_op(int index, Object op) {
                top += index;
                stack[top] = op;
        }

        /* 演算用のスタックから値を取得 */
        public Object pop_op() {
                return stack[top--];
        }

        /* 演算用のスタックの上から指定した番号の値を取得(スタックからは取り出さない) */
        public Object peek_op(int index) {
                return stack[top + index];
        }

        /* シンボルを登録 */
        public void add_symbol(String symbol, Object value) {
                symbols.put(symbol, value);
        }

        /* シンボルに対応する値を取得, シンボルテーブルに存在しなければnull */
        public Object get_symbol(String symbol) {
                if (symbols.containsKey(symbol)) {
                        return symbols.get(symbol);
                } else {
                        return null;
                }
        }

        /* シンボルがシンボルテーブルに登録されているかどうかを取得 */
        public boolean symbol_exist(String symbol) {
                return symbols.containsKey(symbol);
        }

    /** typedefで宣言した型名保持用 */
    private final Set types = new HashSet();

    /** パーサーがtypedefの処理中かどうかを保持するため */
    private final Stack typedefParsingStack = new Stack();

    /** 指定した識別子がtypedefで定義した型名かどうかを返す */
    private boolean isType(String type){
                return types.contains(type);
    }

    /** typedef用に型名を追加 */
    private void addType(String type) {
                types.add(type);
    }

    /** typedefで定義した型名の一覧を出力 */
    private void printTypes(){
                for (Iterator i = types.iterator(); i.hasNext();) {
                        System.out.println(i.next());
                }
    }

    // パーサーを生成
    public static ScriptParser createInstance(java.io.InputStream in) {
                final ScriptParser parser = new ScriptParser(in);
                // Hack to include type "special types"
            parser.types.add("__signed__");
            parser.types.add("__const");
            parser.types.add("__inline__");
            parser.types.add("__signed");
                return parser;
        }

/**************************************************
 * ここから下が文法(生成規則)
 **************************************************/
/** これが解析のエントリポイント */
  final public ASTParse Parse() throws ParseException {
    trace_call("Parse");
    try {/*@bgen(jjtree) Parse */
  ASTParse jjtn000 = new ASTParse(JJTPARSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        label_1:
        while (true) {
          ExternalDeclaration();
          if (jj_2_1(1)) {
            ;
          } else {
            break label_1;
          }
        }
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
printTypes();
                Log.i(TAG, "\u89e3\u6790\u7d42\u4e86");
                {if ("" != null) return jjtn000;}
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Parse");
    }
  }

/** 外部宣言 */
  final public void ExternalDeclaration() throws ParseException {
    trace_call("ExternalDeclaration");
    try {
      if (jj_2_2(2147483647)) {
        FunctionDefinition();
      } else if (jj_2_3(1)) {
        Declaration();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 95:{
          jj_consume_token(95);
          break;
          }
        default:
          jj_la1[0] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("ExternalDeclaration");
    }
  }

/** 関数定義 */
  final public void FunctionDefinition() throws ParseException {
    trace_call("FunctionDefinition");
    try {
      if (jj_2_4(2147483647)) {
        DeclarationSpecifiers();
      } else {
        ;
      }
      Declarator();
      if (jj_2_5(1)) {
        DeclarationList();
      } else {
        ;
      }
      CompoundStatement();
    } finally {
      trace_return("FunctionDefinition");
    }
  }

/** 宣言 */
  final public void Declaration() throws ParseException {
    trace_call("Declaration");
    try {
      DeclarationSpecifiers();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:
      case STAR:
      case 99:{
        InitDeclaratorList();
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        ;
      }
      jj_consume_token(95);
    } finally {
      trace_return("Declaration");
    }
  }

/** 宣言の種類(型)リスト */
  final public void DeclarationList() throws ParseException {
    trace_call("DeclarationList");
    try {
      label_2:
      while (true) {
        Declaration();
        if (jj_2_6(2147483647)) {
          ;
        } else {
          break label_2;
        }
      }
    } finally {
      trace_return("DeclarationList");
    }
  }

/** 宣言のアクセス指定子 */
  final public void DeclarationSpecifiers() throws ParseException {
    trace_call("DeclarationSpecifiers");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case REGISTER:
      case TYPEDEF:
      case EXTERN:
      case STATIC:
      case AUTO:{
        StorageClassSpecifier();
        if (jj_2_7(2147483647)) {
          DeclarationSpecifiers();
        } else {
          ;
        }
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        if (jj_2_10(1)) {
          TypeSpecifier();
          if (jj_2_8(2147483647)) {
            DeclarationSpecifiers();
          } else {
            ;
          }
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case VOLATILE:
          case CONST:{
            TypeQualifier();
            if (jj_2_9(2147483647)) {
              DeclarationSpecifiers();
            } else {
              ;
            }
            break;
            }
          default:
            jj_la1[3] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } finally {
      trace_return("DeclarationSpecifiers");
    }
  }

/** 変数・型のアクセス指定子 */
  final public void StorageClassSpecifier() throws ParseException {
    trace_call("StorageClassSpecifier");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AUTO:{
        jj_consume_token(AUTO);
        break;
        }
      case REGISTER:{
        jj_consume_token(REGISTER);
        break;
        }
      case STATIC:{
        jj_consume_token(STATIC);
        break;
        }
      case EXTERN:{
        jj_consume_token(EXTERN);
        break;
        }
      case TYPEDEF:{
        jj_consume_token(TYPEDEF);
typedefParsingStack.push(Boolean.TRUE);
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("StorageClassSpecifier");
    }
  }

/** 型の種類 */
  final public void TypeSpecifier() throws ParseException {
    trace_call("TypeSpecifier");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VOID:{
        jj_consume_token(VOID);
        break;
        }
      case CHAR:{
        jj_consume_token(CHAR);
        break;
        }
      case SHORT:{
        jj_consume_token(SHORT);
        break;
        }
      case INT:{
        jj_consume_token(INT);
        break;
        }
      case LONG:{
        jj_consume_token(LONG);
        break;
        }
      case FLOAT:{
        jj_consume_token(FLOAT);
        break;
        }
      case DOUBLE:{
        jj_consume_token(DOUBLE);
        break;
        }
      case SIGNED:{
        jj_consume_token(SIGNED);
        break;
        }
      case UNSIGNED:{
        jj_consume_token(UNSIGNED);
        break;
        }
      case STRUCT:
      case UNION:{
        StructOrUnionSpecifier();
        break;
        }
      case ENUM:{
        EnumSpecifier();
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        if (isType(getToken(1).image)) {
          TypedefName();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("TypeSpecifier");
    }
  }

/** 型修飾子 */
  final public void TypeQualifier() throws ParseException {
    trace_call("TypeQualifier");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CONST:{
        jj_consume_token(CONST);
        break;
        }
      case VOLATILE:{
        jj_consume_token(VOLATILE);
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
Log.v(TAG, "\u5b9a\u6570\u578b");
    } finally {
      trace_return("TypeQualifier");
    }
  }

/** 構造体/ユニオンアクセス指定子 */
  final public void StructOrUnionSpecifier() throws ParseException {
    trace_call("StructOrUnionSpecifier");
    try {
typedefParsingStack.push(Boolean.FALSE);
      StructOrUnion();
      if (jj_2_11(3)) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IDENTIFIER:{
          jj_consume_token(IDENTIFIER);
          break;
          }
        default:
          jj_la1[7] = jj_gen;
          ;
        }
        jj_consume_token(96);
        StructDeclarationList();
        jj_consume_token(97);
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IDENTIFIER:{
          jj_consume_token(IDENTIFIER);
          break;
          }
        default:
          jj_la1[8] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
typedefParsingStack.pop();
    } finally {
      trace_return("StructOrUnionSpecifier");
    }
  }

/** 構造体/ユニオン */
  final public void StructOrUnion() throws ParseException {
    trace_call("StructOrUnion");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STRUCT:{
        jj_consume_token(STRUCT);
        break;
        }
      case UNION:{
        jj_consume_token(UNION);
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("StructOrUnion");
    }
  }

/** 構造体/ユニオン宣言リスト */
  final public void StructDeclarationList() throws ParseException {
    trace_call("StructDeclarationList");
    try {
      label_3:
      while (true) {
        StructDeclaration();
        if (jj_2_12(1)) {
          ;
        } else {
          break label_3;
        }
      }
    } finally {
      trace_return("StructDeclarationList");
    }
  }

/** 構造体/ユニオン宣言 */
  final public void StructDeclaration() throws ParseException {
    trace_call("StructDeclaration");
    try {
      SpecifierQualifierList();
      StructDeclaratorList();
      jj_consume_token(95);
    } finally {
      trace_return("StructDeclaration");
    }
  }

/** 構造体/ユニオンの定義内容リスト */
  final public void StructDeclaratorList() throws ParseException {
    trace_call("StructDeclaratorList");
    try {
      StructDeclarator();
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 98:{
          ;
          break;
          }
        default:
          jj_la1[10] = jj_gen;
          break label_4;
        }
        jj_consume_token(98);
        StructDeclarator();
      }
    } finally {
      trace_return("StructDeclaratorList");
    }
  }

/** 構造体/ユニオンの定義内容 */
  final public void StructDeclarator() throws ParseException {
    trace_call("StructDeclarator");
    try {
      if (jj_2_13(3)) {
        Declarator();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IDENTIFIER:
        case COMMA:
        case STAR:
        case 99:{
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case IDENTIFIER:
          case STAR:
          case 99:{
            Declarator();
            break;
            }
          default:
            jj_la1[11] = jj_gen;
            ;
          }
          jj_consume_token(COMMA);
          ConstantExpression();
          break;
          }
        default:
          jj_la1[12] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("StructDeclarator");
    }
  }

/** 初期化付き宣言リスト */
  final public void InitDeclaratorList() throws ParseException {
    trace_call("InitDeclaratorList");
    try {
      InitDeclarator();
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 98:{
          ;
          break;
          }
        default:
          jj_la1[13] = jj_gen;
          break label_5;
        }
        jj_consume_token(98);
        InitDeclarator();
      }
// Finished with a typedefDeclaration??
                if(!(typedefParsingStack.empty()) && ((Boolean)typedefParsingStack.peek()).booleanValue()) {
                        typedefParsingStack.pop();
                }
                Log.v(TAG, "\u521d\u671f\u5316\u4ed8\u304d\u5ba3\u8a00\u30ea\u30b9\u30c8");
    } finally {
      trace_return("InitDeclaratorList");
    }
  }

/** 初期化付き宣言 */
  final public void InitDeclarator() throws ParseException {
    trace_call("InitDeclarator");
    try {
      Declarator();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ASSIGN_EQ:{
        jj_consume_token(ASSIGN_EQ);
        Initializer();
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        ;
      }
Log.v(TAG, "\u521d\u671f\u5316\u4ed8\u304d\u5ba3\u8a00");
    } finally {
      trace_return("InitDeclarator");
    }
  }

/** アクセス指定子 */
  final public void SpecifierQualifierList() throws ParseException {
    trace_call("SpecifierQualifierList");
    try {
      if (jj_2_16(1)) {
        TypeSpecifier();
        if (jj_2_14(2147483647)) {
          SpecifierQualifierList();
        } else {
          ;
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case VOLATILE:
        case CONST:{
          TypeQualifier();
          if (jj_2_15(2147483647)) {
            SpecifierQualifierList();
          } else {
            ;
          }
          break;
          }
        default:
          jj_la1[15] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("SpecifierQualifierList");
    }
  }

/** 列挙型 */
  final public void EnumSpecifier() throws ParseException {
    trace_call("EnumSpecifier");
    try {
      jj_consume_token(ENUM);
      if (jj_2_17(3)) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IDENTIFIER:{
          jj_consume_token(IDENTIFIER);
          break;
          }
        default:
          jj_la1[16] = jj_gen;
          ;
        }
        jj_consume_token(96);
        EnumeratorList();
        jj_consume_token(97);
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IDENTIFIER:{
          jj_consume_token(IDENTIFIER);
          break;
          }
        default:
          jj_la1[17] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("EnumSpecifier");
    }
  }

/** 列挙型の宣言リスト */
  final public void EnumeratorList() throws ParseException {
    trace_call("EnumeratorList");
    try {
      Enumerator();
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 98:{
          ;
          break;
          }
        default:
          jj_la1[18] = jj_gen;
          break label_6;
        }
        jj_consume_token(98);
        Enumerator();
      }
    } finally {
      trace_return("EnumeratorList");
    }
  }

/** 列挙型のアイテム１つ分 */
  final public void Enumerator() throws ParseException {
    trace_call("Enumerator");
    try {
      jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ASSIGN_EQ:{
        jj_consume_token(ASSIGN_EQ);
        ConstantExpression();
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        ;
      }
    } finally {
      trace_return("Enumerator");
    }
  }

/** 宣言子 */
  final public void Declarator() throws ParseException {
    trace_call("Declarator");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STAR:{
        Pointer();
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        ;
      }
      DirectDeclarator();
    } finally {
      trace_return("Declarator");
    }
  }

/** 直接宣言子 */
  final public void DirectDeclarator() throws ParseException {
    trace_call("DirectDeclarator");
    try {Token t;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:{
        t = jj_consume_token(IDENTIFIER);
if(!(typedefParsingStack.empty()) && ((Boolean)typedefParsingStack.peek()).booleanValue()) {
                                addType(t.image);
                        }
        break;
        }
      case 99:{
        jj_consume_token(99);
        Declarator();
        jj_consume_token(100);
        break;
        }
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
typedefParsingStack.push( Boolean.FALSE );
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 99:
        case 101:{
          ;
          break;
          }
        default:
          jj_la1[22] = jj_gen;
          break label_7;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 101:{
          jj_consume_token(101);
          if (jj_2_18(1)) {
            ConstantExpression();
          } else {
            ;
          }
          jj_consume_token(102);
          break;
          }
        default:
          jj_la1[24] = jj_gen;
          if (jj_2_19(3)) {
            jj_consume_token(99);
            ParameterTypeList();
            jj_consume_token(100);
          } else {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case 99:{
              jj_consume_token(99);
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case IDENTIFIER:{
                IdentifierList();
                break;
                }
              default:
                jj_la1[23] = jj_gen;
                ;
              }
              jj_consume_token(100);
              break;
              }
            default:
              jj_la1[25] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
typedefParsingStack.pop();
    } finally {
      trace_return("DirectDeclarator");
    }
  }

/** ポインタ指定子 */
  final public void Pointer() throws ParseException {
    trace_call("Pointer");
    try {
      jj_consume_token(STAR);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VOLATILE:
      case CONST:{
        TypeQualifierList();
        break;
        }
      default:
        jj_la1[26] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STAR:{
        Pointer();
        break;
        }
      default:
        jj_la1[27] = jj_gen;
        ;
      }
    } finally {
      trace_return("Pointer");
    }
  }

/** 型指定子 */
  final public void TypeQualifierList() throws ParseException {
    trace_call("TypeQualifierList");
    try {
      label_8:
      while (true) {
        TypeQualifier();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case VOLATILE:
        case CONST:{
          ;
          break;
          }
        default:
          jj_la1[28] = jj_gen;
          break label_8;
        }
      }
    } finally {
      trace_return("TypeQualifierList");
    }
  }

/** パラメータタイプリスト */
  final public void ParameterTypeList() throws ParseException {
    trace_call("ParameterTypeList");
    try {
      ParameterList();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 98:{
        jj_consume_token(98);
        jj_consume_token(ELLIPSIS);
        break;
        }
      default:
        jj_la1[29] = jj_gen;
        ;
      }
    } finally {
      trace_return("ParameterTypeList");
    }
  }

/** パラメータ宣言リスト */
  final public void ParameterList() throws ParseException {
    trace_call("ParameterList");
    try {
      ParameterDeclaration();
      label_9:
      while (true) {
        if (jj_2_20(2)) {
          ;
        } else {
          break label_9;
        }
        jj_consume_token(98);
        ParameterDeclaration();
      }
    } finally {
      trace_return("ParameterList");
    }
  }

/** パラメータ宣言 */
  final public void ParameterDeclaration() throws ParseException {
    trace_call("ParameterDeclaration");
    try {
      DeclarationSpecifiers();
      if (jj_2_21(2147483647)) {
        Declarator();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case STAR:
        case 99:
        case 101:{
          AbstractDeclarator();
          break;
          }
        default:
          jj_la1[30] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ASSIGN_EQ:{
        jj_consume_token(ASSIGN_EQ);
        AssignmentExpression();
        break;
        }
      default:
        jj_la1[31] = jj_gen;
        ;
      }
    } finally {
      trace_return("ParameterDeclaration");
    }
  }

/** 識別子リスト */
  final public void IdentifierList() throws ParseException {
    trace_call("IdentifierList");
    try {
      jj_consume_token(IDENTIFIER);
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 98:{
          ;
          break;
          }
        default:
          jj_la1[32] = jj_gen;
          break label_10;
        }
        jj_consume_token(98);
        jj_consume_token(IDENTIFIER);
      }
    } finally {
      trace_return("IdentifierList");
    }
  }

/** イニシャライザリスト */
  final public void InitializerList() throws ParseException {
    trace_call("InitializerList");
    try {
      Initializer();
      label_11:
      while (true) {
        if (jj_2_22(2)) {
          ;
        } else {
          break label_11;
        }
        jj_consume_token(98);
        Initializer();
      }
    } finally {
      trace_return("InitializerList");
    }
  }

/** イニシャライザ */
  final public void Initializer() throws ParseException {
    trace_call("Initializer");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 96:{
        jj_consume_token(96);
        InitializerList();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 98:{
          jj_consume_token(98);
          break;
          }
        default:
          jj_la1[33] = jj_gen;
          ;
        }
        jj_consume_token(97);
        break;
        }
      default:
        jj_la1[34] = jj_gen;
        if (jj_2_23(1)) {
          AssignmentExpression();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("Initializer");
    }
  }

/** 型名 */
  final public void TypeName() throws ParseException {
    trace_call("TypeName");
    try {
      SpecifierQualifierList();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STAR:
      case 99:
      case 101:{
        AbstractDeclarator();
        break;
        }
      default:
        jj_la1[35] = jj_gen;
        ;
      }
    } finally {
      trace_return("TypeName");
    }
  }

  final public void AbstractDeclarator() throws ParseException {
    trace_call("AbstractDeclarator");
    try {
      if (jj_2_24(3)) {
        Pointer();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case STAR:
        case 99:
        case 101:{
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case STAR:{
            Pointer();
            break;
            }
          default:
            jj_la1[36] = jj_gen;
            ;
          }
          DirectAbstractDeclarator();
          break;
          }
        default:
          jj_la1[37] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("AbstractDeclarator");
    }
  }

  final public void DirectAbstractDeclarator() throws ParseException {
    trace_call("DirectAbstractDeclarator");
    try {
      if (jj_2_27(2)) {
        jj_consume_token(99);
        AbstractDeclarator();
        jj_consume_token(100);
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 101:{
          jj_consume_token(101);
          if (jj_2_25(1)) {
            ConstantExpression();
          } else {
            ;
          }
          jj_consume_token(102);
          break;
          }
        case 99:{
          jj_consume_token(99);
          if (jj_2_26(1)) {
            ParameterTypeList();
          } else {
            ;
          }
          jj_consume_token(100);
          break;
          }
        default:
          jj_la1[38] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 99:
        case 101:{
          ;
          break;
          }
        default:
          jj_la1[39] = jj_gen;
          break label_12;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 101:{
          jj_consume_token(101);
          if (jj_2_28(1)) {
            ConstantExpression();
          } else {
            ;
          }
          jj_consume_token(102);
          break;
          }
        case 99:{
          jj_consume_token(99);
          if (jj_2_29(1)) {
            ParameterTypeList();
          } else {
            ;
          }
          jj_consume_token(100);
          break;
          }
        default:
          jj_la1[40] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("DirectAbstractDeclarator");
    }
  }

/** typedef名 */
  final public void TypedefName() throws ParseException {
    trace_call("TypedefName");
    try {
      jj_consume_token(IDENTIFIER);
    } finally {
      trace_return("TypedefName");
    }
  }

/** 命令文リスト */
  final public void StatementList() throws ParseException {
    trace_call("StatementList");
    try {
      label_13:
      while (true) {
        Statement();
        if (jj_2_30(2147483647)) {
          ;
        } else {
          break label_13;
        }
      }
    } finally {
      trace_return("StatementList");
    }
  }

/** 命令文 */
  final public void Statement() throws ParseException {
    trace_call("Statement");
    try {
      if (jj_2_31(2147483647)) {
        Declaration();
      } else if (jj_2_32(2147483647)) {
        Expression();
        jj_consume_token(95);
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 96:{
          CompoundStatement();
          break;
          }
        case SWITCH:
        case IF:{
          SelectionStatement();
          break;
          }
        case CONTINUE:
        case RETURN:
        case BREAK:
        case GOTO:{
          JumpStatement();
          break;
          }
        case 95:{
          jj_consume_token(95);
          break;
          }
        default:
          jj_la1[41] = jj_gen;
          if (jj_2_33(2)) {
            LabeledStatement();
          } else {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case WHILE:
            case FOR:
            case DO:{
              IterationStatement();
              break;
              }
            default:
              jj_la1[42] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
    } finally {
      trace_return("Statement");
    }
  }

/** ラベル命令: */
  final public void LabeledStatement() throws ParseException {
    trace_call("LabeledStatement");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:{
        jj_consume_token(IDENTIFIER);
        jj_consume_token(COMMA);
        Statement();
        break;
        }
      case CASE:{
        jj_consume_token(CASE);
        ConstantExpression();
        jj_consume_token(COMMA);
        Statement();
        break;
        }
      case DFLT:{
        jj_consume_token(DFLT);
        jj_consume_token(COMMA);
        Statement();
        break;
        }
      default:
        jj_la1[43] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("LabeledStatement");
    }
  }

/** 複命令文 */
  final public void CompoundStatement() throws ParseException {
    trace_call("CompoundStatement");
    try {
      jj_consume_token(96);
      if (jj_2_34(1)) {
        StatementList();
      } else {
        ;
      }
      jj_consume_token(97);
    } finally {
      trace_return("CompoundStatement");
    }
  }

/** 選択命令文 */
  final public void SelectionStatement() throws ParseException {
    trace_call("SelectionStatement");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IF:{
        jj_consume_token(IF);
        jj_consume_token(99);
        Expression();
        jj_consume_token(100);
        Statement();
        if (jj_2_35(2)) {
          jj_consume_token(ELSE);
          Statement();
        } else {
          ;
        }
        break;
        }
      case SWITCH:{
        jj_consume_token(SWITCH);
        jj_consume_token(99);
        Expression();
        jj_consume_token(100);
        Statement();
        break;
        }
      default:
        jj_la1[44] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("SelectionStatement");
    }
  }

/** 列挙命令 */
  final public void IterationStatement() throws ParseException {
    trace_call("IterationStatement");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case WHILE:{
        jj_consume_token(WHILE);
        jj_consume_token(99);
        Expression();
        jj_consume_token(100);
        Statement();
        break;
        }
      case DO:{
        jj_consume_token(DO);
        Statement();
        jj_consume_token(WHILE);
        jj_consume_token(99);
        Expression();
        jj_consume_token(100);
        jj_consume_token(95);
        break;
        }
      case FOR:{
        jj_consume_token(FOR);
        jj_consume_token(99);
        if (jj_2_36(3)) {
          Declaration();
        } else if (jj_2_37(1)) {
          Expression();
          jj_consume_token(95);
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 95:{
            jj_consume_token(95);
            break;
            }
          default:
            jj_la1[45] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        if (jj_2_38(1)) {
          Expression();
        } else {
          ;
        }
        jj_consume_token(95);
        if (jj_2_39(1)) {
          Expression();
        } else {
          ;
        }
        jj_consume_token(100);
        Statement();
        break;
        }
      default:
        jj_la1[46] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("IterationStatement");
    }
  }

/** ジャンプ命令 */
  final public void JumpStatement() throws ParseException {
    trace_call("JumpStatement");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case GOTO:{
        jj_consume_token(GOTO);
        jj_consume_token(IDENTIFIER);
        jj_consume_token(95);
        break;
        }
      case CONTINUE:{
        jj_consume_token(CONTINUE);
        jj_consume_token(95);
        break;
        }
      case BREAK:{
        jj_consume_token(BREAK);
        jj_consume_token(95);
        break;
        }
      case RETURN:{
        jj_consume_token(RETURN);
        if (jj_2_40(1)) {
          Expression();
        } else {
          ;
        }
        jj_consume_token(95);
        break;
        }
      default:
        jj_la1[47] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("JumpStatement");
    }
  }

/** 式 */
  final public void Expression() throws ParseException {
    trace_call("Expression");
    try {
      AssignmentExpression();
      label_14:
      while (true) {
        if (jj_2_41(2)) {
          ;
        } else {
          break label_14;
        }
        jj_consume_token(98);
        AssignmentExpression();
      }
    } finally {
      trace_return("Expression");
    }
  }

/**  代入式 */
  final public void AssignmentExpression() throws ParseException {
    trace_call("AssignmentExpression");
    try {
      ConditionalExpression();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ASSIGN_EQ:
      case MULT_EQ:
      case DIV_EQ:
      case MOD_EQ:
      case PLUS_EQ:
      case MINUS_EQ:
      case SHIFT_LEFT_EQ:
      case SHIFT_RIGHT_EQ:
      case BIT_AND_EQ:
      case BIT_XOR_EQ:
      case BIT_OR_EQ:{
        AssignmentOperator();
        AssignmentExpression();
        break;
        }
      default:
        jj_la1[48] = jj_gen;
        ;
      }
    } finally {
      trace_return("AssignmentExpression");
    }
  }

/** 代入演算子 */
  final public void AssignmentOperator() throws ParseException {
    trace_call("AssignmentOperator");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ASSIGN_EQ:{
        jj_consume_token(ASSIGN_EQ);
        break;
        }
      case MULT_EQ:{
        jj_consume_token(MULT_EQ);
        break;
        }
      case DIV_EQ:{
        jj_consume_token(DIV_EQ);
        break;
        }
      case MOD_EQ:{
        jj_consume_token(MOD_EQ);
        break;
        }
      case PLUS_EQ:{
        jj_consume_token(PLUS_EQ);
        break;
        }
      case MINUS_EQ:{
        jj_consume_token(MINUS_EQ);
        break;
        }
      case SHIFT_LEFT_EQ:{
        jj_consume_token(SHIFT_LEFT_EQ);
        break;
        }
      case SHIFT_RIGHT_EQ:{
        jj_consume_token(SHIFT_RIGHT_EQ);
        break;
        }
      case BIT_AND_EQ:{
        jj_consume_token(BIT_AND_EQ);
        break;
        }
      case BIT_XOR_EQ:{
        jj_consume_token(BIT_XOR_EQ);
        break;
        }
      case BIT_OR_EQ:{
        jj_consume_token(BIT_OR_EQ);
        break;
        }
      default:
        jj_la1[49] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("AssignmentOperator");
    }
  }

/** 比較演算式 */
  final public void ConditionalExpression() throws ParseException {
    trace_call("ConditionalExpression");
    try {
      LogicalORExpression();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case QUESTION:{
        jj_consume_token(QUESTION);
        ConditionalExpression();
        jj_consume_token(COMMA);
ASTConditional jjtn001 = new ASTConditional(JJTCONDITIONAL);
                                                             boolean jjtc001 = true;
                                                             jjtree.openNodeScope(jjtn001);
        try {
          ConditionalExpression();
        } catch (Throwable jjte001) {
if (jjtc001) {
                                                               jjtree.clearNodeScope(jjtn001);
                                                               jjtc001 = false;
                                                             } else {
                                                               jjtree.popNode();
                                                             }
                                                             if (jjte001 instanceof RuntimeException) {
                                                               {if (true) throw (RuntimeException)jjte001;}
                                                             }
                                                             if (jjte001 instanceof ParseException) {
                                                               {if (true) throw (ParseException)jjte001;}
                                                             }
                                                             {if (true) throw (Error)jjte001;}
        } finally {
if (jjtc001) {
                                                               jjtree.closeNodeScope(jjtn001,  3);
                                                             }
        }
        break;
        }
      default:
        jj_la1[50] = jj_gen;
        ;
      }
    } finally {
      trace_return("ConditionalExpression");
    }
  }

/** 定数式 */
  final public void ConstantExpression() throws ParseException {
    trace_call("ConstantExpression");
    try {
ASTConstant jjtn001 = new ASTConstant(JJTCONSTANT);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
      try {
        ConditionalExpression();
      } catch (Throwable jjte001) {
if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  1);
          }
      }
    } finally {
      trace_return("ConstantExpression");
    }
  }

/** 論理和式 */
  final public void LogicalORExpression() throws ParseException {
    trace_call("LogicalORExpression");
    try {
      LogicalANDExpression();
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case OR:{
          ;
          break;
          }
        default:
          jj_la1[51] = jj_gen;
          break label_15;
        }
        jj_consume_token(OR);
ASTLogicalOR jjtn001 = new ASTLogicalOR(JJTLOGICALOR);
                       boolean jjtc001 = true;
                       jjtree.openNodeScope(jjtn001);
        try {
          LogicalANDExpression();
        } catch (Throwable jjte001) {
if (jjtc001) {
                         jjtree.clearNodeScope(jjtn001);
                         jjtc001 = false;
                       } else {
                         jjtree.popNode();
                       }
                       if (jjte001 instanceof RuntimeException) {
                         {if (true) throw (RuntimeException)jjte001;}
                       }
                       if (jjte001 instanceof ParseException) {
                         {if (true) throw (ParseException)jjte001;}
                       }
                       {if (true) throw (Error)jjte001;}
        } finally {
if (jjtc001) {
                         jjtree.closeNodeScope(jjtn001,  2);
                       }
        }
      }
    } finally {
      trace_return("LogicalORExpression");
    }
  }

/** 論理積式 */
  final public void LogicalANDExpression() throws ParseException {
    trace_call("LogicalANDExpression");
    try {
      InclusiveORExpression();
      label_16:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case AND:{
          ;
          break;
          }
        default:
          jj_la1[52] = jj_gen;
          break label_16;
        }
        jj_consume_token(AND);
ASTLogicalAND jjtn001 = new ASTLogicalAND(JJTLOGICALAND);
                        boolean jjtc001 = true;
                        jjtree.openNodeScope(jjtn001);
        try {
          InclusiveORExpression();
        } catch (Throwable jjte001) {
if (jjtc001) {
                          jjtree.clearNodeScope(jjtn001);
                          jjtc001 = false;
                        } else {
                          jjtree.popNode();
                        }
                        if (jjte001 instanceof RuntimeException) {
                          {if (true) throw (RuntimeException)jjte001;}
                        }
                        if (jjte001 instanceof ParseException) {
                          {if (true) throw (ParseException)jjte001;}
                        }
                        {if (true) throw (Error)jjte001;}
        } finally {
if (jjtc001) {
                          jjtree.closeNodeScope(jjtn001,  2);
                        }
        }
      }
    } finally {
      trace_return("LogicalANDExpression");
    }
  }

/** ビット論理和式 */
  final public void InclusiveORExpression() throws ParseException {
    trace_call("InclusiveORExpression");
    try {
      ExclusiveORExpression();
      label_17:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BIT_OR:{
          ;
          break;
          }
        default:
          jj_la1[53] = jj_gen;
          break label_17;
        }
        jj_consume_token(BIT_OR);
ASTInclusiveOR jjtn001 = new ASTInclusiveOR(JJTINCLUSIVEOR);
                           boolean jjtc001 = true;
                           jjtree.openNodeScope(jjtn001);
        try {
          ExclusiveORExpression();
        } catch (Throwable jjte001) {
if (jjtc001) {
                             jjtree.clearNodeScope(jjtn001);
                             jjtc001 = false;
                           } else {
                             jjtree.popNode();
                           }
                           if (jjte001 instanceof RuntimeException) {
                             {if (true) throw (RuntimeException)jjte001;}
                           }
                           if (jjte001 instanceof ParseException) {
                             {if (true) throw (ParseException)jjte001;}
                           }
                           {if (true) throw (Error)jjte001;}
        } finally {
if (jjtc001) {
                             jjtree.closeNodeScope(jjtn001,  2);
                           }
        }
      }
    } finally {
      trace_return("InclusiveORExpression");
    }
  }

/** 排他的ビット論理和 */
  final public void ExclusiveORExpression() throws ParseException {
    trace_call("ExclusiveORExpression");
    try {
      ANDExpression();
      label_18:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BIT_XOR:{
          ;
          break;
          }
        default:
          jj_la1[54] = jj_gen;
          break label_18;
        }
        jj_consume_token(BIT_XOR);
ASTExclusiveOR jjtn001 = new ASTExclusiveOR(JJTEXCLUSIVEOR);
                            boolean jjtc001 = true;
                            jjtree.openNodeScope(jjtn001);
        try {
          ANDExpression();
        } catch (Throwable jjte001) {
if (jjtc001) {
                              jjtree.clearNodeScope(jjtn001);
                              jjtc001 = false;
                            } else {
                              jjtree.popNode();
                            }
                            if (jjte001 instanceof RuntimeException) {
                              {if (true) throw (RuntimeException)jjte001;}
                            }
                            if (jjte001 instanceof ParseException) {
                              {if (true) throw (ParseException)jjte001;}
                            }
                            {if (true) throw (Error)jjte001;}
        } finally {
if (jjtc001) {
                              jjtree.closeNodeScope(jjtn001,  2);
                            }
        }
      }
    } finally {
      trace_return("ExclusiveORExpression");
    }
  }

/** ビット論理積式 */
  final public void ANDExpression() throws ParseException {
    trace_call("ANDExpression");
    try {
      EqualityExpression();
      label_19:
      while (true) {
        if (jj_2_42(2)) {
          ;
        } else {
          break label_19;
        }
        jj_consume_token(AMPERSAND);
ASTAnd jjtn001 = new ASTAnd(JJTAND);
                                           boolean jjtc001 = true;
                                           jjtree.openNodeScope(jjtn001);
        try {
          EqualityExpression();
        } catch (Throwable jjte001) {
if (jjtc001) {
                                             jjtree.clearNodeScope(jjtn001);
                                             jjtc001 = false;
                                           } else {
                                             jjtree.popNode();
                                           }
                                           if (jjte001 instanceof RuntimeException) {
                                             {if (true) throw (RuntimeException)jjte001;}
                                           }
                                           if (jjte001 instanceof ParseException) {
                                             {if (true) throw (ParseException)jjte001;}
                                           }
                                           {if (true) throw (Error)jjte001;}
        } finally {
if (jjtc001) {
                                             jjtree.closeNodeScope(jjtn001,  2);
                                           }
        }
      }
    } finally {
      trace_return("ANDExpression");
    }
  }

/** 比較演算式 */
  final public void EqualityExpression() throws ParseException {
    trace_call("EqualityExpression");
    try {Token t;
      RelationalExpression();
      label_20:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case EQ:
        case NOT_EQ:{
          ;
          break;
          }
        default:
          jj_la1[55] = jj_gen;
          break label_20;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case EQ:{
          jj_consume_token(EQ);
ASTEquality jjtn001 = new ASTEquality(JJTEQUALITY);
                       boolean jjtc001 = true;
                       jjtree.openNodeScope(jjtn001);
          try {
            RelationalExpression();
          } catch (Throwable jjte001) {
if (jjtc001) {
                         jjtree.clearNodeScope(jjtn001);
                         jjtc001 = false;
                       } else {
                         jjtree.popNode();
                       }
                       if (jjte001 instanceof RuntimeException) {
                         {if (true) throw (RuntimeException)jjte001;}
                       }
                       if (jjte001 instanceof ParseException) {
                         {if (true) throw (ParseException)jjte001;}
                       }
                       {if (true) throw (Error)jjte001;}
          } finally {
if (jjtc001) {
                         jjtree.closeNodeScope(jjtn001,  2);
                       }
          }
          break;
          }
        case NOT_EQ:{
          jj_consume_token(NOT_EQ);
ASTNotEquality jjtn002 = new ASTNotEquality(JJTNOTEQUALITY);
                           boolean jjtc002 = true;
                           jjtree.openNodeScope(jjtn002);
          try {
            RelationalExpression();
          } catch (Throwable jjte002) {
if (jjtc002) {
                             jjtree.clearNodeScope(jjtn002);
                             jjtc002 = false;
                           } else {
                             jjtree.popNode();
                           }
                           if (jjte002 instanceof RuntimeException) {
                             {if (true) throw (RuntimeException)jjte002;}
                           }
                           if (jjte002 instanceof ParseException) {
                             {if (true) throw (ParseException)jjte002;}
                           }
                           {if (true) throw (Error)jjte002;}
          } finally {
if (jjtc002) {
                             jjtree.closeNodeScope(jjtn002,  2);
                           }
          }
          break;
          }
        default:
          jj_la1[56] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("EqualityExpression");
    }
  }

/** 比較演算式 */
  final public void RelationalExpression() throws ParseException {
    trace_call("RelationalExpression");
    try {Token t;
      ShiftExpression();
      label_21:
      while (true) {
        if (jj_2_43(2)) {
          ;
        } else {
          break label_21;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LT:{
          jj_consume_token(LT);
ASTRelationalLT jjtn001 = new ASTRelationalLT(JJTRELATIONALLT);
                               boolean jjtc001 = true;
                               jjtree.openNodeScope(jjtn001);
          try {
            ShiftExpression();
          } catch (Throwable jjte001) {
if (jjtc001) {
                                 jjtree.clearNodeScope(jjtn001);
                                 jjtc001 = false;
                               } else {
                                 jjtree.popNode();
                               }
                               if (jjte001 instanceof RuntimeException) {
                                 {if (true) throw (RuntimeException)jjte001;}
                               }
                               if (jjte001 instanceof ParseException) {
                                 {if (true) throw (ParseException)jjte001;}
                               }
                               {if (true) throw (Error)jjte001;}
          } finally {
if (jjtc001) {
                                 jjtree.closeNodeScope(jjtn001,  2);
                               }
          }
          break;
          }
        case GT:{
          jj_consume_token(GT);
ASTRelationalGT jjtn002 = new ASTRelationalGT(JJTRELATIONALGT);
                               boolean jjtc002 = true;
                               jjtree.openNodeScope(jjtn002);
          try {
            ShiftExpression();
          } catch (Throwable jjte002) {
if (jjtc002) {
                                 jjtree.clearNodeScope(jjtn002);
                                 jjtc002 = false;
                               } else {
                                 jjtree.popNode();
                               }
                               if (jjte002 instanceof RuntimeException) {
                                 {if (true) throw (RuntimeException)jjte002;}
                               }
                               if (jjte002 instanceof ParseException) {
                                 {if (true) throw (ParseException)jjte002;}
                               }
                               {if (true) throw (Error)jjte002;}
          } finally {
if (jjtc002) {
                                 jjtree.closeNodeScope(jjtn002,  2);
                               }
          }
          break;
          }
        case LTE:{
          jj_consume_token(LTE);
ASTRelationalLTE jjtn003 = new ASTRelationalLTE(JJTRELATIONALLTE);
                                boolean jjtc003 = true;
                                jjtree.openNodeScope(jjtn003);
          try {
            ShiftExpression();
          } catch (Throwable jjte003) {
if (jjtc003) {
                                  jjtree.clearNodeScope(jjtn003);
                                  jjtc003 = false;
                                } else {
                                  jjtree.popNode();
                                }
                                if (jjte003 instanceof RuntimeException) {
                                  {if (true) throw (RuntimeException)jjte003;}
                                }
                                if (jjte003 instanceof ParseException) {
                                  {if (true) throw (ParseException)jjte003;}
                                }
                                {if (true) throw (Error)jjte003;}
          } finally {
if (jjtc003) {
                                  jjtree.closeNodeScope(jjtn003,  2);
                                }
          }
          break;
          }
        case GTE:{
          jj_consume_token(GTE);
ASTRelationalGTE jjtn004 = new ASTRelationalGTE(JJTRELATIONALGTE);
                                boolean jjtc004 = true;
                                jjtree.openNodeScope(jjtn004);
          try {
            ShiftExpression();
          } catch (Throwable jjte004) {
if (jjtc004) {
                                  jjtree.clearNodeScope(jjtn004);
                                  jjtc004 = false;
                                } else {
                                  jjtree.popNode();
                                }
                                if (jjte004 instanceof RuntimeException) {
                                  {if (true) throw (RuntimeException)jjte004;}
                                }
                                if (jjte004 instanceof ParseException) {
                                  {if (true) throw (ParseException)jjte004;}
                                }
                                {if (true) throw (Error)jjte004;}
          } finally {
if (jjtc004) {
                                  jjtree.closeNodeScope(jjtn004,  2);
                                }
          }
          break;
          }
        default:
          jj_la1[57] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("RelationalExpression");
    }
  }

/** シフト演算式 */
  final public void ShiftExpression() throws ParseException {
    trace_call("ShiftExpression");
    try {Token t;
      AdditiveExpression();
      label_22:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SHIFT_LEFT:
        case SHIFT_RIGHT:{
          ;
          break;
          }
        default:
          jj_la1[58] = jj_gen;
          break label_22;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SHIFT_LEFT:{
          jj_consume_token(SHIFT_LEFT);
ASTShiftLeft jjtn001 = new ASTShiftLeft(JJTSHIFTLEFT);
                               boolean jjtc001 = true;
                               jjtree.openNodeScope(jjtn001);
          try {
            AdditiveExpression();
          } catch (Throwable jjte001) {
if (jjtc001) {
                                 jjtree.clearNodeScope(jjtn001);
                                 jjtc001 = false;
                               } else {
                                 jjtree.popNode();
                               }
                               if (jjte001 instanceof RuntimeException) {
                                 {if (true) throw (RuntimeException)jjte001;}
                               }
                               if (jjte001 instanceof ParseException) {
                                 {if (true) throw (ParseException)jjte001;}
                               }
                               {if (true) throw (Error)jjte001;}
          } finally {
if (jjtc001) {
                                 jjtree.closeNodeScope(jjtn001,  2);
                               }
          }
          break;
          }
        case SHIFT_RIGHT:{
          jj_consume_token(SHIFT_RIGHT);
ASTShiftRight jjtn002 = new ASTShiftRight(JJTSHIFTRIGHT);
                                boolean jjtc002 = true;
                                jjtree.openNodeScope(jjtn002);
          try {
            AdditiveExpression();
          } catch (Throwable jjte002) {
if (jjtc002) {
                                  jjtree.clearNodeScope(jjtn002);
                                  jjtc002 = false;
                                } else {
                                  jjtree.popNode();
                                }
                                if (jjte002 instanceof RuntimeException) {
                                  {if (true) throw (RuntimeException)jjte002;}
                                }
                                if (jjte002 instanceof ParseException) {
                                  {if (true) throw (ParseException)jjte002;}
                                }
                                {if (true) throw (Error)jjte002;}
          } finally {
if (jjtc002) {
                                  jjtree.closeNodeScope(jjtn002,  2);
                                }
          }
          break;
          }
        default:
          jj_la1[59] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("ShiftExpression");
    }
  }

/** 算術和/算術差式 */
  final public void AdditiveExpression() throws ParseException {
    trace_call("AdditiveExpression");
    try {Token t;
      MultiplicativeExpression();
      label_23:
      while (true) {
        if (jj_2_44(2)) {
          ;
        } else {
          break label_23;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PLUS:{
          t = jj_consume_token(PLUS);
ASTAdditivePlus jjtn001 = new ASTAdditivePlus(JJTADDITIVEPLUS);
                                   boolean jjtc001 = true;
                                   jjtree.openNodeScope(jjtn001);
          try {
            MultiplicativeExpression();
          } catch (Throwable jjte001) {
if (jjtc001) {
                                     jjtree.clearNodeScope(jjtn001);
                                     jjtc001 = false;
                                   } else {
                                     jjtree.popNode();
                                   }
                                   if (jjte001 instanceof RuntimeException) {
                                     {if (true) throw (RuntimeException)jjte001;}
                                   }
                                   if (jjte001 instanceof ParseException) {
                                     {if (true) throw (ParseException)jjte001;}
                                   }
                                   {if (true) throw (Error)jjte001;}
          } finally {
if (jjtc001) {
                                     jjtree.closeNodeScope(jjtn001,  2);
                                   }
          }
          break;
          }
        case MINUS:{
          t = jj_consume_token(MINUS);
ASTAdditiveMinus jjtn002 = new ASTAdditiveMinus(JJTADDITIVEMINUS);
                                    boolean jjtc002 = true;
                                    jjtree.openNodeScope(jjtn002);
          try {
            MultiplicativeExpression();
          } catch (Throwable jjte002) {
if (jjtc002) {
                                      jjtree.clearNodeScope(jjtn002);
                                      jjtc002 = false;
                                    } else {
                                      jjtree.popNode();
                                    }
                                    if (jjte002 instanceof RuntimeException) {
                                      {if (true) throw (RuntimeException)jjte002;}
                                    }
                                    if (jjte002 instanceof ParseException) {
                                      {if (true) throw (ParseException)jjte002;}
                                    }
                                    {if (true) throw (Error)jjte002;}
          } finally {
if (jjtc002) {
                                      jjtree.closeNodeScope(jjtn002,  2);
                                    }
          }
          break;
          }
        default:
          jj_la1[60] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("AdditiveExpression");
    }
  }

/** 算術除積式 */
  final public void MultiplicativeExpression() throws ParseException {
    trace_call("MultiplicativeExpression");
    try {Token t;
      PmExpression();
      label_24:
      while (true) {
        if (jj_2_45(2)) {
          ;
        } else {
          break label_24;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case STAR:{
          jj_consume_token(STAR);
          break;
          }
        case DIV:{
          jj_consume_token(DIV);
          break;
          }
        case MOD:{
          jj_consume_token(MOD);
          break;
          }
        default:
          jj_la1[61] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
ASTMultiplicative jjtn001 = new ASTMultiplicative(JJTMULTIPLICATIVE);
                                                          boolean jjtc001 = true;
                                                          jjtree.openNodeScope(jjtn001);
        try {
          PmExpression();
        } catch (Throwable jjte001) {
if (jjtc001) {
                                                            jjtree.clearNodeScope(jjtn001);
                                                            jjtc001 = false;
                                                          } else {
                                                            jjtree.popNode();
                                                          }
                                                          if (jjte001 instanceof RuntimeException) {
                                                            {if (true) throw (RuntimeException)jjte001;}
                                                          }
                                                          if (jjte001 instanceof ParseException) {
                                                            {if (true) throw (ParseException)jjte001;}
                                                          }
                                                          {if (true) throw (Error)jjte001;}
        } finally {
if (jjtc001) {
                                                            jjtree.closeNodeScope(jjtn001,  2);
                                                          }
        }
      }
    } finally {
      trace_return("MultiplicativeExpression");
    }
  }

/** ポインタ参照式 */
  final public void PmExpression() throws ParseException {
    trace_call("PmExpression");
    try {Token t;
      CastExpression();
      label_25:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case DOTSTAR:
        case ARROWSTAR:{
          ;
          break;
          }
        default:
          jj_la1[62] = jj_gen;
          break label_25;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case DOTSTAR:{
          jj_consume_token(DOTSTAR);
          break;
          }
        case ARROWSTAR:{
          jj_consume_token(ARROWSTAR);
          break;
          }
        default:
          jj_la1[63] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        CastExpression();
      }
    } finally {
      trace_return("PmExpression");
    }
  }

/** キャスト演算式 */
  final public void CastExpression() throws ParseException {
    trace_call("CastExpression");
    try {Token t;
      if (jj_2_46(2147483647)) {
        jj_consume_token(99);
        TypeName();
        jj_consume_token(100);
        CastExpression();
      } else if (jj_2_47(1)) {
        UnaryExpression();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("CastExpression");
    }
  }

/** 単項演算式 */
  final public void UnaryExpression() throws ParseException {
    trace_call("UnaryExpression");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUSPLUS:{
        jj_consume_token(PLUSPLUS);
        UnaryExpression();
        break;
        }
      case MINUSMINUS:{
        jj_consume_token(MINUSMINUS);
        UnaryExpression();
        break;
        }
      default:
        jj_la1[64] = jj_gen;
        if (jj_2_50(3)) {
          UnaryOperator();
          CastExpression();
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case SIZEOF:{
            jj_consume_token(SIZEOF);
            if (jj_2_48(2147483647)) {
              jj_consume_token(99);
              TypeName();
              jj_consume_token(100);
            } else if (jj_2_49(1)) {
              UnaryExpression();
            } else {
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          default:
            jj_la1[65] = jj_gen;
            if (jj_2_51(1)) {
              PostfixExpression();
            } else {
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
    } finally {
      trace_return("UnaryExpression");
    }
  }

/** 単項演算子 */
  final public void UnaryOperator() throws ParseException {
    trace_call("UnaryOperator");
    try {Token t;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AMPERSAND:{
        jj_consume_token(AMPERSAND);
        break;
        }
      case STAR:{
        jj_consume_token(STAR);
        break;
        }
      case PLUS:{
        jj_consume_token(PLUS);
        break;
        }
      case MINUS:{
        jj_consume_token(MINUS);
        break;
        }
      case TILDE:{
        jj_consume_token(TILDE);
        break;
        }
      case NOT:{
        jj_consume_token(NOT);
        break;
        }
      default:
        jj_la1[66] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("UnaryOperator");
    }
  }

/** 後置演算式 */
  final public void PostfixExpression() throws ParseException {
    trace_call("PostfixExpression");
    try {Token t;
      if (jj_2_55(3)) {
        PrimaryExpression();
        label_26:
        while (true) {
          if (jj_2_52(2)) {
            ;
          } else {
            break label_26;
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 101:{
            jj_consume_token(101);
            Expression();
            jj_consume_token(102);
            break;
            }
          case 99:{
            jj_consume_token(99);
            if (jj_2_53(1)) {
              ArgumentExpressionList();
            } else {
              ;
            }
            jj_consume_token(100);
            break;
            }
          case DOT:{
            jj_consume_token(DOT);
            jj_consume_token(IDENTIFIER);
            break;
            }
          case POINTERTO:{
            jj_consume_token(POINTERTO);
            jj_consume_token(IDENTIFIER);
            break;
            }
          case PLUSPLUS:{
            jj_consume_token(PLUSPLUS);
            break;
            }
          case MINUSMINUS:{
            jj_consume_token(MINUSMINUS);
            break;
            }
          default:
            jj_la1[67] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      } else if (jj_2_56(1)) {
        TypeSpecifier();
        jj_consume_token(99);
        if (jj_2_54(1)) {
          ArgumentExpressionList();
        } else {
          ;
        }
        jj_consume_token(100);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("PostfixExpression");
    }
  }

/** 優先演算式 */
  final public void PrimaryExpression() throws ParseException {
    trace_call("PrimaryExpression");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:{
        jj_consume_token(IDENTIFIER);
        break;
        }
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:{
        Constant();
        break;
        }
      case 99:{
        jj_consume_token(99);
        Expression();
        jj_consume_token(100);
        break;
        }
      default:
        jj_la1[68] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("PrimaryExpression");
    }
  }

/** 引数式リスト */
  final public void ArgumentExpressionList() throws ParseException {
    trace_call("ArgumentExpressionList");
    try {
      AssignmentExpression();
      label_27:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 98:{
          ;
          break;
          }
        default:
          jj_la1[69] = jj_gen;
          break label_27;
        }
        jj_consume_token(98);
        AssignmentExpression();
      }
    } finally {
      trace_return("ArgumentExpressionList");
    }
  }

  final public void Identifier() throws ParseException {
    trace_call("Identifier");
    try {/*@bgen(jjtree) Identifier */
                                  ASTIdentifier jjtn000 = new ASTIdentifier(JJTIDENTIFIER);
                                  boolean jjtc000 = true;
                                  jjtree.openNodeScope(jjtn000);Token t;
      try {
        t = jj_consume_token(IDENTIFIER);
jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
jjtn000.setName(t.image);
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("Identifier");
    }
  }

/** 定数 */
  final public void Constant() throws ParseException {
    trace_call("Constant");
    try {Token t;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INTEGER_LITERAL:{
        t = jj_consume_token(INTEGER_LITERAL);
ASTIntegerConst jjtn001 = new ASTIntegerConst(JJTINTEGERCONST);
                              boolean jjtc001 = true;
                              jjtree.openNodeScope(jjtn001);
        try {
jjtree.closeNodeScope(jjtn001, true);
                              jjtc001 = false;
jjtn001.jjtSetValue(t.image);
        } finally {
if (jjtc001) {
                                jjtree.closeNodeScope(jjtn001, true);
                              }
        }
        break;
        }
      case FLOATING_POINT_LITERAL:{
        t = jj_consume_token(FLOATING_POINT_LITERAL);
ASTFloatConst jjtn002 = new ASTFloatConst(JJTFLOATCONST);
                                     boolean jjtc002 = true;
                                     jjtree.openNodeScope(jjtn002);
        try {
jjtree.closeNodeScope(jjtn002, true);
                                     jjtc002 = false;
jjtn002.jjtSetValue(t.image);
        } finally {
if (jjtc002) {
                                       jjtree.closeNodeScope(jjtn002, true);
                                     }
        }
        break;
        }
      case CHARACTER_LITERAL:{
        t = jj_consume_token(CHARACTER_LITERAL);
ASTCharConst jjtn003 = new ASTCharConst(JJTCHARCONST);
                                boolean jjtc003 = true;
                                jjtree.openNodeScope(jjtn003);
        try {
jjtree.closeNodeScope(jjtn003, true);
                                jjtc003 = false;
jjtn003.jjtSetValue(t.image);
        } finally {
if (jjtc003) {
                                  jjtree.closeNodeScope(jjtn003, true);
                                }
        }
        break;
        }
      case STRING_LITERAL:{
        t = jj_consume_token(STRING_LITERAL);
ASTStringConst jjtn004 = new ASTStringConst(JJTSTRINGCONST);
                             boolean jjtc004 = true;
                             jjtree.openNodeScope(jjtn004);
        try {
jjtree.closeNodeScope(jjtn004, true);
                             jjtc004 = false;
jjtn004.jjtSetValue(t.image);
        } finally {
if (jjtc004) {
                               jjtree.closeNodeScope(jjtn004, true);
                             }
        }
        break;
        }
      default:
        jj_la1[70] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("Constant");
    }
  }

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_2_32(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private boolean jj_2_33(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  private boolean jj_2_34(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  private boolean jj_2_35(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  private boolean jj_2_36(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  private boolean jj_2_37(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  private boolean jj_2_38(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  private boolean jj_2_39(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  private boolean jj_2_40(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  private boolean jj_2_41(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  private boolean jj_2_42(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  private boolean jj_2_43(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  private boolean jj_2_44(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  private boolean jj_2_45(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  private boolean jj_2_46(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  private boolean jj_2_47(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  private boolean jj_2_48(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  private boolean jj_2_49(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  private boolean jj_2_50(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(49, xla); }
  }

  private boolean jj_2_51(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_51(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(50, xla); }
  }

  private boolean jj_2_52(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_52(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(51, xla); }
  }

  private boolean jj_2_53(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_53(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(52, xla); }
  }

  private boolean jj_2_54(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_54(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(53, xla); }
  }

  private boolean jj_2_55(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_55(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(54, xla); }
  }

  private boolean jj_2_56(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_56(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(55, xla); }
  }

  private boolean jj_3R_37()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) return true;
    }
    return false;
  }

  private boolean jj_3_16()
 {
    if (jj_3R_33()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_120()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_135()
 {
    if (jj_scan_token(98)) return true;
    if (jj_3R_134()) return true;
    return false;
  }

  private boolean jj_3_56()
 {
    if (jj_3R_33()) return true;
    if (jj_scan_token(99)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_54()) jj_scanpos = xsp;
    if (jj_scan_token(100)) return true;
    return false;
  }

  private boolean jj_3_52()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_scan_token(87)) {
    jj_scanpos = xsp;
    if (jj_scan_token(88)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_134()
 {
    if (jj_3R_36()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_161()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_183()
 {
    if (jj_scan_token(98)) return true;
    if (jj_3R_162()) return true;
    return false;
  }

  private boolean jj_3_55()
 {
    if (jj_3R_68()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_52()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_62()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_55()) {
    jj_scanpos = xsp;
    if (jj_3_56()) return true;
    }
    return false;
  }

  private boolean jj_3_48()
 {
    if (jj_scan_token(99)) return true;
    if (jj_3R_58()) return true;
    if (jj_scan_token(100)) return true;
    return false;
  }

  private boolean jj_3R_114()
 {
    if (jj_3R_134()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_135()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_13()
 {
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3_49()
 {
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_60()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(73)) {
    jj_scanpos = xsp;
    if (jj_scan_token(84)) {
    jj_scanpos = xsp;
    if (jj_scan_token(82)) {
    jj_scanpos = xsp;
    if (jj_scan_token(83)) {
    jj_scanpos = xsp;
    if (jj_scan_token(89)) {
    jj_scanpos = xsp;
    if (jj_scan_token(90)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_166()
 {
    if (jj_scan_token(99)) return true;
    if (jj_3R_58()) return true;
    if (jj_scan_token(100)) return true;
    return false;
  }

  private boolean jj_3R_162()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3R_167()) return true;
    }
    return false;
  }

  private boolean jj_3R_77()
 {
    if (jj_3R_116()) return true;
    return false;
  }

  private boolean jj_3_51()
 {
    if (jj_3R_62()) return true;
    return false;
  }

  private boolean jj_3R_137()
 {
    if (jj_3R_162()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_183()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_46()
 {
    if (jj_scan_token(99)) return true;
    if (jj_3R_58()) return true;
    if (jj_scan_token(100)) return true;
    return false;
  }

  private boolean jj_3R_105()
 {
    if (jj_scan_token(SIZEOF)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_166()) {
    jj_scanpos = xsp;
    if (jj_3_49()) return true;
    }
    return false;
  }

  private boolean jj_3_50()
 {
    if (jj_3R_60()) return true;
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3R_104()
 {
    if (jj_scan_token(MINUSMINUS)) return true;
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_35()
 {
    if (jj_3R_37()) return true;
    if (jj_3R_137()) return true;
    if (jj_scan_token(95)) return true;
    return false;
  }

  private boolean jj_3R_59()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_103()) {
    jj_scanpos = xsp;
    if (jj_3R_104()) {
    jj_scanpos = xsp;
    if (jj_3_50()) {
    jj_scanpos = xsp;
    if (jj_3R_105()) {
    jj_scanpos = xsp;
    if (jj_3_51()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_103()
 {
    if (jj_scan_token(PLUSPLUS)) return true;
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3_5()
 {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3_12()
 {
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3_11()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(52)) jj_scanpos = xsp;
    if (jj_scan_token(96)) return true;
    if (jj_3R_34()) return true;
    if (jj_scan_token(97)) return true;
    return false;
  }

  private boolean jj_3R_133()
 {
    if (jj_scan_token(TYPEDEF)) return true;
    return false;
  }

  private boolean jj_3R_34()
 {
    Token xsp;
    if (jj_3_12()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_12()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_47()
 {
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_61()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_106()) {
    jj_scanpos = xsp;
    if (jj_3_47()) return true;
    }
    return false;
  }

  private boolean jj_3R_106()
 {
    if (jj_scan_token(99)) return true;
    if (jj_3R_58()) return true;
    if (jj_scan_token(100)) return true;
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3R_136()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(31)) {
    jj_scanpos = xsp;
    if (jj_scan_token(36)) return true;
    }
    return false;
  }

  private boolean jj_3_45()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(84)) {
    jj_scanpos = xsp;
    if (jj_scan_token(85)) {
    jj_scanpos = xsp;
    if (jj_scan_token(86)) return true;
    }
    }
    if (jj_3R_57()) return true;
    return false;
  }

  private boolean jj_3R_189()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(93)) {
    jj_scanpos = xsp;
    if (jj_scan_token(94)) return true;
    }
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3R_56()
 {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_101()) return true;
    return false;
  }

  private boolean jj_3R_55()
 {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_101()) return true;
    return false;
  }

  private boolean jj_3R_76()
 {
    if (jj_3R_115()) return true;
    return false;
  }

  private boolean jj_3R_57()
 {
    if (jj_3R_61()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_189()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_7()
 {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_101()
 {
    if (jj_3R_57()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_45()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_44()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) return true;
    }
    return false;
  }

  private boolean jj_3R_115()
 {
    if (jj_3R_136()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) return true;
    }
    return false;
  }

  private boolean jj_3_9()
 {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3_8()
 {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_188()
 {
    if (jj_scan_token(SHIFT_RIGHT)) return true;
    if (jj_3R_131()) return true;
    return false;
  }

  private boolean jj_3R_110()
 {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_112()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_scan_token(21)) return true;
    }
    return false;
  }

  private boolean jj_3R_187()
 {
    if (jj_scan_token(SHIFT_LEFT)) return true;
    if (jj_3R_131()) return true;
    return false;
  }

  private boolean jj_3R_186()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_187()) {
    jj_scanpos = xsp;
    if (jj_3R_188()) return true;
    }
    return false;
  }

  private boolean jj_3R_131()
 {
    if (jj_3R_101()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_44()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_54()
 {
    if (jj_scan_token(GTE)) return true;
    if (jj_3R_100()) return true;
    return false;
  }

  private boolean jj_3R_53()
 {
    if (jj_scan_token(LTE)) return true;
    if (jj_3R_100()) return true;
    return false;
  }

  private boolean jj_3R_52()
 {
    if (jj_scan_token(GT)) return true;
    if (jj_3R_100()) return true;
    return false;
  }

  private boolean jj_3R_51()
 {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_100()) return true;
    return false;
  }

  private boolean jj_3R_111()
 {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_113()
 {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_33()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(38)) {
    jj_scanpos = xsp;
    if (jj_scan_token(26)) {
    jj_scanpos = xsp;
    if (jj_scan_token(33)) {
    jj_scanpos = xsp;
    if (jj_scan_token(23)) {
    jj_scanpos = xsp;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = isType(getToken(1).image);
    jj_lookingAhead = false;
    if (!jj_semLA || jj_scan_token(52)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_100()
 {
    if (jj_3R_131()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_186()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_75()
 {
    if (jj_3R_114()) return true;
    return false;
  }

  private boolean jj_3_43()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_109()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(44)) {
    jj_scanpos = xsp;
    if (jj_scan_token(22)) {
    jj_scanpos = xsp;
    if (jj_scan_token(32)) {
    jj_scanpos = xsp;
    if (jj_scan_token(30)) {
    jj_scanpos = xsp;
    if (jj_3R_133()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_6()
 {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_185()
 {
    if (jj_scan_token(NOT_EQ)) return true;
    if (jj_3R_99()) return true;
    return false;
  }

  private boolean jj_3R_184()
 {
    if (jj_scan_token(EQ)) return true;
    if (jj_3R_99()) return true;
    return false;
  }

  private boolean jj_3R_182()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_184()) {
    jj_scanpos = xsp;
    if (jj_3R_185()) return true;
    }
    return false;
  }

  private boolean jj_3R_99()
 {
    if (jj_3R_100()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_43()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_73()
 {
    if (jj_3R_112()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_113()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_10()
 {
    if (jj_3R_33()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_111()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_31()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_72()
 {
    if (jj_3R_109()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_110()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_74()
 {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3_42()
 {
    if (jj_scan_token(AMPERSAND)) return true;
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3R_32()
 {
    Token xsp;
    if (jj_3R_74()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_74()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_50()
 {
    if (jj_3R_99()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_182()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_4()
 {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_181()
 {
    if (jj_scan_token(BIT_XOR)) return true;
    if (jj_3R_174()) return true;
    return false;
  }

  private boolean jj_3R_30()
 {
    if (jj_3R_31()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_75()) jj_scanpos = xsp;
    if (jj_scan_token(95)) return true;
    return false;
  }

  private boolean jj_3R_174()
 {
    if (jj_3R_50()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_42()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_176()
 {
    if (jj_scan_token(BIT_OR)) return true;
    if (jj_3R_169()) return true;
    return false;
  }

  private boolean jj_3R_70()
 {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_29()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_70()) jj_scanpos = xsp;
    if (jj_3R_36()) return true;
    xsp = jj_scanpos;
    if (jj_3_5()) jj_scanpos = xsp;
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_169()
 {
    if (jj_3R_174()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_181()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_69()
 {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_171()
 {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_164()) return true;
    return false;
  }

  private boolean jj_3R_164()
 {
    if (jj_3R_169()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_176()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_28()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_scan_token(95)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_165()
 {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_140()) return true;
    return false;
  }

  private boolean jj_3R_140()
 {
    if (jj_3R_164()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_171()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_123()
 {
    if (jj_3R_140()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_165()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_155()
 {
    if (jj_scan_token(QUESTION)) return true;
    if (jj_3R_83()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_83()) return true;
    return false;
  }

  private boolean jj_3R_39()
 {
    if (jj_3R_83()) return true;
    return false;
  }

  private boolean jj_3_37()
 {
    if (jj_3R_47()) return true;
    if (jj_scan_token(95)) return true;
    return false;
  }

  private boolean jj_3R_83()
 {
    if (jj_3R_123()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_155()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_41()
 {
    if (jj_scan_token(98)) return true;
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3_39()
 {
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3_35()
 {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_156()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(58)) {
    jj_scanpos = xsp;
    if (jj_scan_token(59)) {
    jj_scanpos = xsp;
    if (jj_scan_token(60)) {
    jj_scanpos = xsp;
    if (jj_scan_token(61)) {
    jj_scanpos = xsp;
    if (jj_scan_token(62)) {
    jj_scanpos = xsp;
    if (jj_scan_token(63)) {
    jj_scanpos = xsp;
    if (jj_scan_token(64)) {
    jj_scanpos = xsp;
    if (jj_scan_token(65)) {
    jj_scanpos = xsp;
    if (jj_scan_token(66)) {
    jj_scanpos = xsp;
    if (jj_scan_token(67)) {
    jj_scanpos = xsp;
    if (jj_scan_token(68)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_130()
 {
    if (jj_3R_156()) return true;
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3_40()
 {
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_43()
 {
    if (jj_3R_83()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_130()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_36()
 {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_151()
 {
    if (jj_scan_token(RETURN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_40()) jj_scanpos = xsp;
    if (jj_scan_token(95)) return true;
    return false;
  }

  private boolean jj_3_38()
 {
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_150()
 {
    if (jj_scan_token(BREAK)) return true;
    if (jj_scan_token(95)) return true;
    return false;
  }

  private boolean jj_3R_47()
 {
    if (jj_3R_43()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_41()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_149()
 {
    if (jj_scan_token(CONTINUE)) return true;
    if (jj_scan_token(95)) return true;
    return false;
  }

  private boolean jj_3R_148()
 {
    if (jj_scan_token(GOTO)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(95)) return true;
    return false;
  }

  private boolean jj_3R_154()
 {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(99)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_36()) {
    jj_scanpos = xsp;
    if (jj_3_37()) {
    jj_scanpos = xsp;
    if (jj_scan_token(95)) return true;
    }
    }
    xsp = jj_scanpos;
    if (jj_3_38()) jj_scanpos = xsp;
    if (jj_scan_token(95)) return true;
    xsp = jj_scanpos;
    if (jj_3_39()) jj_scanpos = xsp;
    if (jj_scan_token(100)) return true;
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_128()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_148()) {
    jj_scanpos = xsp;
    if (jj_3R_149()) {
    jj_scanpos = xsp;
    if (jj_3R_150()) {
    jj_scanpos = xsp;
    if (jj_3R_151()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_153()
 {
    if (jj_scan_token(DO)) return true;
    if (jj_3R_46()) return true;
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(99)) return true;
    if (jj_3R_47()) return true;
    if (jj_scan_token(100)) return true;
    if (jj_scan_token(95)) return true;
    return false;
  }

  private boolean jj_3R_152()
 {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(99)) return true;
    if (jj_3R_47()) return true;
    if (jj_scan_token(100)) return true;
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_147()
 {
    if (jj_scan_token(SWITCH)) return true;
    if (jj_scan_token(99)) return true;
    if (jj_3R_47()) return true;
    if (jj_scan_token(100)) return true;
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_146()
 {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(99)) return true;
    if (jj_3R_47()) return true;
    if (jj_scan_token(100)) return true;
    if (jj_3R_46()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_35()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_129()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_152()) {
    jj_scanpos = xsp;
    if (jj_3R_153()) {
    jj_scanpos = xsp;
    if (jj_3R_154()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_127()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_146()) {
    jj_scanpos = xsp;
    if (jj_3R_147()) return true;
    }
    return false;
  }

  private boolean jj_3_29()
 {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_178()
 {
    if (jj_scan_token(99)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_29()) jj_scanpos = xsp;
    if (jj_scan_token(100)) return true;
    return false;
  }

  private boolean jj_3_34()
 {
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3R_97()
 {
    if (jj_scan_token(DFLT)) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_71()
 {
    if (jj_scan_token(96)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_34()) jj_scanpos = xsp;
    if (jj_scan_token(97)) return true;
    return false;
  }

  private boolean jj_3R_96()
 {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_39()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_95()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_48()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_95()) {
    jj_scanpos = xsp;
    if (jj_3R_96()) {
    jj_scanpos = xsp;
    if (jj_3R_97()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_30()
 {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3_32()
 {
    if (jj_3R_47()) return true;
    if (jj_scan_token(95)) return true;
    return false;
  }

  private boolean jj_3_31()
 {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_94()
 {
    if (jj_3R_129()) return true;
    return false;
  }

  private boolean jj_3_33()
 {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_93()
 {
    if (jj_3R_128()) return true;
    return false;
  }

  private boolean jj_3R_92()
 {
    if (jj_3R_127()) return true;
    return false;
  }

  private boolean jj_3R_91()
 {
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3R_98()
 {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_90()
 {
    if (jj_3R_47()) return true;
    if (jj_scan_token(95)) return true;
    return false;
  }

  private boolean jj_3R_46()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) {
    jj_scanpos = xsp;
    if (jj_3R_91()) {
    jj_scanpos = xsp;
    if (jj_3R_92()) {
    jj_scanpos = xsp;
    if (jj_3R_93()) {
    jj_scanpos = xsp;
    if (jj_scan_token(95)) {
    jj_scanpos = xsp;
    if (jj_3_33()) {
    jj_scanpos = xsp;
    if (jj_3R_94()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_89()
 {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3_28()
 {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_49()
 {
    Token xsp;
    if (jj_3R_98()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_98()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_102()
 {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3_26()
 {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3_25()
 {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_177()
 {
    if (jj_scan_token(101)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_28()) jj_scanpos = xsp;
    if (jj_scan_token(102)) return true;
    return false;
  }

  private boolean jj_3R_172()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_177()) {
    jj_scanpos = xsp;
    if (jj_3R_178()) return true;
    }
    return false;
  }

  private boolean jj_3R_145()
 {
    if (jj_scan_token(99)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_26()) jj_scanpos = xsp;
    if (jj_scan_token(100)) return true;
    return false;
  }

  private boolean jj_3R_144()
 {
    if (jj_scan_token(101)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_25()) jj_scanpos = xsp;
    if (jj_scan_token(102)) return true;
    return false;
  }

  private boolean jj_3_27()
 {
    if (jj_scan_token(99)) return true;
    if (jj_3R_45()) return true;
    if (jj_scan_token(100)) return true;
    return false;
  }

  private boolean jj_3R_126()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_27()) {
    jj_scanpos = xsp;
    if (jj_3R_144()) {
    jj_scanpos = xsp;
    if (jj_3R_145()) return true;
    }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_172()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_125()
 {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_88()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_125()) jj_scanpos = xsp;
    if (jj_3R_126()) return true;
    return false;
  }

  private boolean jj_3_24()
 {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_45()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_24()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) return true;
    }
    return false;
  }

  private boolean jj_3R_58()
 {
    if (jj_3R_37()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_102()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_22()
 {
    if (jj_scan_token(98)) return true;
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_175()
 {
    if (jj_scan_token(98)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_23()
 {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_42()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3_23()) return true;
    }
    return false;
  }

  private boolean jj_3R_85()
 {
    if (jj_scan_token(96)) return true;
    if (jj_3R_179()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(98)) jj_scanpos = xsp;
    if (jj_scan_token(97)) return true;
    return false;
  }

  private boolean jj_3_21()
 {
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3_20()
 {
    if (jj_scan_token(98)) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_179()
 {
    if (jj_3R_42()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_22()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_180()
 {
    if (jj_scan_token(ASSIGN_EQ)) return true;
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_168()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_175()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_142()
 {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_141()
 {
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3R_87()
 {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_170()
 {
    if (jj_scan_token(98)) return true;
    if (jj_scan_token(ELLIPSIS)) return true;
    return false;
  }

  private boolean jj_3R_41()
 {
    if (jj_3R_31()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_141()) {
    jj_scanpos = xsp;
    if (jj_3R_142()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_180()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_84()
 {
    if (jj_3R_41()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_20()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_40()
 {
    if (jj_3R_84()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_170()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_86()
 {
    if (jj_3R_124()) return true;
    return false;
  }

  private boolean jj_3R_143()
 {
    if (jj_3R_112()) return true;
    return false;
  }

  private boolean jj_3R_124()
 {
    Token xsp;
    if (jj_3R_143()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_143()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_163()
 {
    if (jj_3R_168()) return true;
    return false;
  }

  private boolean jj_3_18()
 {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_44()
 {
    if (jj_scan_token(STAR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_86()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_87()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_139()
 {
    if (jj_scan_token(99)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_163()) jj_scanpos = xsp;
    if (jj_scan_token(100)) return true;
    return false;
  }

  private boolean jj_3_19()
 {
    if (jj_scan_token(99)) return true;
    if (jj_3R_40()) return true;
    if (jj_scan_token(100)) return true;
    return false;
  }

  private boolean jj_3R_138()
 {
    if (jj_scan_token(101)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_18()) jj_scanpos = xsp;
    if (jj_scan_token(102)) return true;
    return false;
  }

  private boolean jj_3R_119()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_138()) {
    jj_scanpos = xsp;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3R_139()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_118()
 {
    if (jj_scan_token(99)) return true;
    if (jj_3R_36()) return true;
    if (jj_scan_token(100)) return true;
    return false;
  }

  private boolean jj_3R_117()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_122()
 {
    if (jj_scan_token(ASSIGN_EQ)) return true;
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_160()
 {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_79()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_117()) {
    jj_scanpos = xsp;
    if (jj_3R_118()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_119()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_159()
 {
    if (jj_scan_token(CHARACTER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3_15()
 {
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3_14()
 {
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_78()
 {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_82()
 {
    if (jj_scan_token(98)) return true;
    if (jj_3R_81()) return true;
    return false;
  }

  private boolean jj_3R_158()
 {
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_36()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_78()) jj_scanpos = xsp;
    if (jj_3R_79()) return true;
    return false;
  }

  private boolean jj_3R_157()
 {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_132()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_157()) {
    jj_scanpos = xsp;
    if (jj_3R_158()) {
    jj_scanpos = xsp;
    if (jj_3R_159()) {
    jj_scanpos = xsp;
    if (jj_3R_160()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_190()
 {
    if (jj_scan_token(98)) return true;
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_121()
 {
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_81()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_122()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_120()
 {
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3_54()
 {
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3_17()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(52)) jj_scanpos = xsp;
    if (jj_scan_token(96)) return true;
    if (jj_3R_38()) return true;
    if (jj_scan_token(97)) return true;
    return false;
  }

  private boolean jj_3R_38()
 {
    if (jj_3R_81()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_82()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_108()
 {
    if (jj_scan_token(99)) return true;
    if (jj_3R_47()) return true;
    if (jj_scan_token(100)) return true;
    return false;
  }

  private boolean jj_3_53()
 {
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_67()
 {
    if (jj_3R_43()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_190()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_107()
 {
    if (jj_3R_132()) return true;
    return false;
  }

  private boolean jj_3R_161()
 {
    if (jj_scan_token(ASSIGN_EQ)) return true;
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_116()
 {
    if (jj_scan_token(ENUM)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) return true;
    }
    return false;
  }

  private boolean jj_3R_66()
 {
    if (jj_scan_token(POINTERTO)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_65()
 {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_173()
 {
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3R_64()
 {
    if (jj_scan_token(99)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_53()) jj_scanpos = xsp;
    if (jj_scan_token(100)) return true;
    return false;
  }

  private boolean jj_3R_63()
 {
    if (jj_scan_token(101)) return true;
    if (jj_3R_47()) return true;
    if (jj_scan_token(102)) return true;
    return false;
  }

  private boolean jj_3R_167()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_173()) jj_scanpos = xsp;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_68()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_3R_107()) {
    jj_scanpos = xsp;
    if (jj_3R_108()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_80()
 {
    if (jj_3R_112()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_121()) jj_scanpos = xsp;
    return false;
  }

  /** Generated Token Manager. */
  public ScriptParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  /** Whether we are looking ahead. */
  private boolean jj_lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[71];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x41400000,0x200000,0x41400000,0x84800000,0x200000,0x0,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x200000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200000,0x0,0x200000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x30100000,0x0,0x2000000,0x10000000,0x0,0x0,0x20100000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8000000,0x0,0x0,0xd1000,0x0,0xd1000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x100000,0x1001,0x20,0x1001,0x26cd2,0x20,0x100000,0x100000,0x10,0x0,0x100000,0x900000,0x0,0x4000000,0x20,0x100000,0x100000,0x0,0x4000000,0x0,0x100000,0x0,0x100000,0x0,0x0,0x20,0x0,0x20,0x0,0x0,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x48008,0x90004,0x100200,0x40000,0x0,0x90004,0x8008,0xfc000000,0xfc000000,0x1000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100000,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x80000000,0x100000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100000,0x100000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100000,0x0,0x0,0x0,0x0,0x0,0x0,0x100000,0x0,0x0,0x100000,0x0,0x0,0x0,0x0,0x100000,0x100000,0x100000,0x0,0x0,0x0,0x80000000,0x0,0x0,0x0,0x80000000,0x0,0x0,0x1f,0x1f,0x0,0x20,0x40,0x80,0x100,0xc00,0xc00,0xf000,0x30000,0x30000,0xc0000,0x700000,0x60000000,0x60000000,0x1800000,0x0,0x61c0200,0x19800000,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x8,0x8,0x4,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x8,0x28,0x0,0x20,0x8,0x0,0x0,0x0,0x4,0x28,0x0,0x4,0x4,0x1,0x28,0x0,0x28,0x28,0x28,0x28,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x28,0x8,0x4,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[56];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public ScriptParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ScriptParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ScriptParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 71; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 71; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public ScriptParser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new ScriptParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 71; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
      jj_input_stream = new JavaCharStream(stream, 1, 1);
   } else {
      jj_input_stream.ReInit(stream, 1, 1);
   }
   if (token_source == null) {
      token_source = new ScriptParserTokenManager(jj_input_stream);
   }

    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 71; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public ScriptParser(ScriptParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 71; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ScriptParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 71; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = jj_lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) {
       return;
    }

    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];

      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }

      for (int[] oldentry : jj_expentries) {
        if (oldentry.length == jj_expentry.length) {
          boolean isMatched = true;

          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              isMatched = false;
              break;
            }

          }
          if (isMatched) {
            jj_expentries.add(jj_expentry);
            break;
          }
        }
      }

      if (pos != 0) {
        jj_lasttokens[(jj_endpos = pos) - 1] = kind;
      }
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[103];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 71; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 103; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  private int trace_indent = 0;
  private boolean trace_enabled = true;

/** Enable tracing. */
  final public void enable_tracing() {
    trace_enabled = true;
  }

/** Disable tracing. */
  final public void disable_tracing() {
    trace_enabled = false;
  }

  protected void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  protected void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  protected void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + TokenMgrError.addEscapes(t.image) + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  protected void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + TokenMgrError.addEscapes(t1.image) + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 56; i++) {
      try {
        JJCalls p = jj_2_rtns[i];

        do {
          if (p.gen > jj_gen) {
            jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
            switch (i) {
              case 0: jj_3_1(); break;
              case 1: jj_3_2(); break;
              case 2: jj_3_3(); break;
              case 3: jj_3_4(); break;
              case 4: jj_3_5(); break;
              case 5: jj_3_6(); break;
              case 6: jj_3_7(); break;
              case 7: jj_3_8(); break;
              case 8: jj_3_9(); break;
              case 9: jj_3_10(); break;
              case 10: jj_3_11(); break;
              case 11: jj_3_12(); break;
              case 12: jj_3_13(); break;
              case 13: jj_3_14(); break;
              case 14: jj_3_15(); break;
              case 15: jj_3_16(); break;
              case 16: jj_3_17(); break;
              case 17: jj_3_18(); break;
              case 18: jj_3_19(); break;
              case 19: jj_3_20(); break;
              case 20: jj_3_21(); break;
              case 21: jj_3_22(); break;
              case 22: jj_3_23(); break;
              case 23: jj_3_24(); break;
              case 24: jj_3_25(); break;
              case 25: jj_3_26(); break;
              case 26: jj_3_27(); break;
              case 27: jj_3_28(); break;
              case 28: jj_3_29(); break;
              case 29: jj_3_30(); break;
              case 30: jj_3_31(); break;
              case 31: jj_3_32(); break;
              case 32: jj_3_33(); break;
              case 33: jj_3_34(); break;
              case 34: jj_3_35(); break;
              case 35: jj_3_36(); break;
              case 36: jj_3_37(); break;
              case 37: jj_3_38(); break;
              case 38: jj_3_39(); break;
              case 39: jj_3_40(); break;
              case 40: jj_3_41(); break;
              case 41: jj_3_42(); break;
              case 42: jj_3_43(); break;
              case 43: jj_3_44(); break;
              case 44: jj_3_45(); break;
              case 45: jj_3_46(); break;
              case 46: jj_3_47(); break;
              case 47: jj_3_48(); break;
              case 48: jj_3_49(); break;
              case 49: jj_3_50(); break;
              case 50: jj_3_51(); break;
              case 51: jj_3_52(); break;
              case 52: jj_3_53(); break;
              case 53: jj_3_54(); break;
              case 54: jj_3_55(); break;
              case 55: jj_3_56(); break;
            }
          }
          p = p.next;
        } while (p != null);

        } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }

    p.gen = jj_gen + xla - jj_la; 
    p.first = token;
    p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
