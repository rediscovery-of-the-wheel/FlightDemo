/* Generated By:JJTree: Do not edit this line. SimpleNode.java Version 6.1 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.serenegiant.lang.script;

public class SimpleNode implements Node {

	protected Node parent;
	protected Node[] children;
	protected int id;
	protected String value;
	protected ScriptParser parser;

	public SimpleNode(int i) {
		id = i;
	}

	public SimpleNode(ScriptParser p, int i) {
		this(i);
		parser = p;
	}

	public void jjtOpen() {
	}

	public void jjtClose() {
	}

	public void jjtSetParent(Node n) {
		parent = n;
	}

	public Node jjtGetParent() {
		return parent;
	}

	public void jjtAddChild(Node n, int i) {
		if (children == null) {
			children = new Node[i + 1];
		} else if (i >= children.length) {
			Node c[] = new Node[i + 1];
			System.arraycopy(children, 0, c, 0, children.length);
			children = c;
		}
		children[i] = n;
	}

	public Node jjtGetChild(int i) {
		return children[i];
	}

	public int jjtGetNumChildren() {
		return (children == null) ? 0 : children.length;
	}

	public void jjtSetValue(String value) {
		this.value = value;
	}

	public String jjtGetValue() {
		return value;
	}

	public int jjtGetAsInt() throws NumberFormatException {
		try {
			return Integer.parseInt(value);
		} catch (NumberFormatException e) {
			try {
				return (int)Double.parseDouble(value);
			} catch (NumberFormatException e1) {
				throw e1;
			}
		}
	}

	public float jjtGetAsFloat() throws NumberFormatException {
		try {
			return Float.parseFloat(value);
		} catch (NumberFormatException e) {
			try {
				return (float)Double.parseDouble(value);
			} catch (NumberFormatException e1) {
				throw e1;
			}
		}
	}

	/**
	 * Accept the visitor. *
	 */
	public Object jjtAccept(ScriptParserVisitor visitor, Object data) {
		return visitor.visit(this, data);
	}

	public float jjtAcceptAsFloat(ScriptParserVisitor visitor, Object data) {
		return ((Number)visitor.visit(this, data)).floatValue();
	}

	public int jjtAcceptAsInt(ScriptParserVisitor visitor, Object data) {
		return ((Number)visitor.visit(this, data)).intValue();
	}

	public boolean jjtAcceptAsBool(ScriptParserVisitor visitor, Object data) {
		Object v = visitor.visit(this, data);
		if (v instanceof Boolean) {
			return (boolean) v;
		} else {
			return ((Number)v).floatValue() != 0;
		}
	}

	/**
	 * Accept the visitor. *
	 */
	public Object childrenAccept(ScriptParserVisitor visitor, Object data) {
		if (children != null) {
			for (int i = 0; i < children.length; ++i) {
				children[i].jjtAccept(visitor, data);
			}
		}
		return data;
	}

  /* You can override these two methods in subclasses of SimpleNode to
	 customize the way the node appears when the tree is dumped.  If
     your output uses more than one line you should override
     toString(String), otherwise overriding toString() is probably all
     you need to do. */

	public String toString() {
		return ScriptParserTreeConstants.jjtNodeName[id];
	}

	public String toString(String prefix) {
		return prefix + toString();
	}

  /* Override this method if you want to customize how the node dumps
     out its children. */

	public void dump(String prefix) {
		System.out.println(toString(prefix));
		if (children != null) {
			for (int i = 0; i < children.length; ++i) {
				SimpleNode n = (SimpleNode) children[i];
				if (n != null) {
					n.dump(prefix + " ");
				}
			}
		}
	}

	public int getId() {
		return id;
	}
}

/* JavaCC - OriginalChecksum=0a5c2c87ed295176c5e7ec790e3bc224 (do not edit this line) */
